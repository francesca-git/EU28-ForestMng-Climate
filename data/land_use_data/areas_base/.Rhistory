lapply(1:length(v6), function(x) v6[x]^v7[x])
sapply(v6, function(x) x^v7)
lapply(1:length(v1), function(x) v1[x]^v2[x])
lapply(1:length(v1), function(x) v1[[x]]^v2[[x]])
v1
v2
v1[[1]]^v2[[2]]
v1[[1]]^2
v1[[1]]^v2[[1]][1]
v1[[1]]*v2[[1]]
V4
v4
v5
v6
v7
v <- array(1:300, dim = c(3, 10, 10))
v8 <- array(2, dim = c(3, 10, 10))
v^v8
dim(v8$)
dim(v8)
1/NA
0/0
View(Areas_p)
prova = 0
prova1 = 0
prova/prova1
rm(prova, prova1)
v9 = matrix(NaN, nrow = 2, ncol = 2)
v9
v9(is.nan(NaN))
is.nan(NaN)
v9[is.nan(NaN)]
v9[is.nan(v9)]
v9 = matrix(c(NaN,1), nrow = 2, ncol = 2)
v9
v9[is.nan(v9)]
which(v9[is.nan(v9)])
v9[is.nan(v9)]<-0
v9
v9 = matrix(c(NaN,1), nrow = 2, ncol = 2)
v9[is.nan(v9)]<-NA
v9
v9[is.na(v9)]<-0
v9
for (j in 1:nlanduse) {
for (k in 1:ntaxa) {
CF_occ_taxa_3d_1[,j,k] = Slost[,k+1]*a[,j,k]/Areas_lu[,j]
}
}
CF_occ_taxa_3d_1 <- array(data = NA, dim = c(necoregions,nlanduse,ntaxa), dimnames = list(c(1:necoregions),land_use_type, taxa))
for (j in 1:nlanduse) {
for (k in 1:ntaxa) {
CF_occ_taxa_3d_1[,j,k] = Slost[,k+1]*a[,j,k]/Areas_lu[,j]
}
}
CF_occ_taxa_3d_1[is.nan(CF_occ_taxa_3d_1)]<-NA
which((CF_occ_taxa_3d_1-CF_occ_taxa != 0) == TRUE)
which((CF_occ_taxa_3d_1-CF_occ_taxa_3d != 0) == TRUE)
which((CF_occ_taxa_3d_1-CF_occ_taxa_3d != 0) == FALSE)
length(which((CF_occ_taxa_3d_1-CF_occ_taxa_3d != 0) == FALSE))
804*5*6
length(which((CF_occ_taxa_3d_1-CF_occ_taxa_3d != 0) == NA))
dim(CF_occ_taxa_3d)
dim(CF_occ_taxa_3d_1)
dim(CF_occ_taxa_3d-CF_occ_taxa_3d_1)
length(which((CF_occ_taxa_3d_1-CF_occ_taxa_3d != 0) == TRUE))
View(CF_occ_taxa_3d_1-CF_occ_taxa_3d)
length(which((CF_occ_taxa_3d_1-CF_occ_taxa_3d == NA) == TRUE))
length(which((CF_occ_taxa_3d_1-CF_occ_taxa_3d == NA) == FALSE))
length(which(CF_occ_taxa_3d_1-CF_occ_taxa_3d == 0))
length(which(CF_occ_taxa_3d_1-CF_occ_taxa_3d == NA))
View(CF_occ_taxa_3d_1-CF_occ_taxa_3d)
length(which(CF_occ_taxa_3d_1-CF_occ_taxa_3d == "NA"))
v10 = CF_occ_taxa_3d_1-CF_occ_taxa_3d
head(CF_occ_taxa_3d_1-CF_occ_taxa_3d == NA)
CF_occ_taxa_3d_1-CF_occ_taxa_3d == NA
CF_occ_taxa_3d_1-CF_occ_taxa_3d != NA
which(v10 == NA)
which(v10 != NA)
v10 != NA
head(v10)
dim(which(CF_occ_taxa_3d_1-CF_occ_taxa_3d == "NA"))
dim(v10)
length(which(CF_occ_taxa_3d_1-CF_occ_taxa_3d == 0))
length(which(is.na(CF_occ_taxa_3d_1-CF_occ_taxa_3d))
)
804*5*6
a_1 <- array(data = NA, dim = dim(CFloc_3d_ecoreg), dimnames = list(unique(Ecoregions$Eco_code),land_use_type, taxa)) #weighted factor to include the extent of each land use per ecoregion
for (j in 1:nlanduse) {
for (k in 1:ntaxa) {
a_1[,j,k] = Areas_p[,j]*CFloc_3d_ecoreg[,j,k]/(sum(Areas_p[,]*CFloc_3d_ecoreg[,,k]))
}
}
length(which(is.na(a - a_1))
)
length(which(a-a_1 != 0)
)
length(which(is.nan(a - a_1)))
v11 = a- a_1
View(a_1)
NaN-NaN
a_1 <- array(data = NA, dim = dim(CFloc_3d_ecoreg), dimnames = list(unique(Ecoregions$Eco_code),land_use_type, taxa)) #weighted factor to include the extent of each land use per ecoregion
for (j in 1:nlanduse) {
for (k in 1:ntaxa) {
a_1[,j,k] = Areas_p[,j]*CFloc_3d_ecoreg[,j,k]/(sum(Areas_p*CFloc_3d_ecoreg[,,k]))
}
}
v11 = a- a_1
length(which(is.nan(a - a_1)))
length(which(a-a_1 != 0)
)
length(which(a_suit-a_1 != 0)
)
rm(a_1)
rm(CF_occ_taxa_3d_1)
Slost_1 <- data.frame(matrix(NA, nrow = necoregions, ncol = ntaxa)) #species lost per ecoregion and per taxa
CF_occ_av_1 <- data.frame(matrix(NA, nrow = necoregions, ncol = ntaxa))
for (k in 1:ntaxa) {
Slost_1[,k+1] = Sorg[,k]*(1-((Areas_org_new$A_new + a_suit[,k])/Areas_org_new$A_org)^Ecoregions$z_values)
CF_occ_av_1[,k+1] = Slost[,k+1] / Areas_org_new$A_org
}
length(which(Slost - Slost_1 != 0)
)
length(which(Slost - Slost_1 != 0))
Slost - Slost_1
length(which(Slost[2:6] - Slost_1[2:6] != 0))
length(which(Slost[2:6] - Slost_1[2:6] == 0))
804*5
length(which(CF_occ_av_1[2:6] - CF_occ_av[2:6] == 0))
h_1 <- array(data = NA, dim = dim(CFloc_3d_ecoreg), dimnames = list(unique(Ecoregions$Eco_code),land_use_type, taxa))
for (j in 1:nlanduse) {
for (k in 1:ntaxa) {
h_1[,j,k] = (1-CFloc_3d_ecoreg[,j,k])^(1/Ecoregions$z_values)
}
}
length(which(h -h_1 == 0))
length(which(h -h_1 != 0))
rm(v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v, matr, CF_occ_av_1, Slost_1,test, h_1)
hCalc = function(x, y) {
if (missing(y)) {
y = mean(z)
}
hCalc = (1-x)^(1/z)
}
hCalc = function(x, y) {
if (missing(y)) {
y = mean(z)
}
hCalc = (1-x)^(1/y)
}
h_1 = hCalc(x = CFloc_3d_ecoreg, y = Ecoregions$z_values)
length(which(h -h_1 == 0))
v1 <- array(1:300, dim = c(3, 10, 10))
typeof(Ecoregions$z_values)
v2 <- array(2, dim = 3)
v2
typeof(v2)
v1^v2
Ecoregions$z_values
v1^v2
(1-v1)^(1/v2)
v3 = hCalc(x = v1, y = v2)
h_1 = hCalc(x = CFloc_3d_ecoreg, y = Ecoregions$z_values)
dim(CFloc_3d_ecoreg)
dim(Ecoregions$z_values)
h <- array(data = NA, dim = dim(CFloc_3d_ecoreg), dimnames = list(unique(Ecoregions$Eco_code),land_use_type, taxa))
for (j in 1:nlanduse) {
for (k in 1:ntaxa) {
h[,j,k] = (1-CFloc_3d_ecoreg[,j,k])^(1/Ecoregions$z_values)
}
}
h[46,7,8]
h[46,1,1]
h[1,1,1]
(1- CFloc_3d_ecoreg[1,1,1])
(1- CFloc_3d_ecoreg[1,1,1])^(1/0.258)
1/0.258
h_1 = apply(CFloc_3d_ecoreg, hCalc, z = Ecoregions$z_values)
h_1 = apply(CFloc_3d_ecoreg, FUN = hCalc, z = Ecoregions$z_values)
h_1 = apply(CFloc_3d_ecoreg, MARGINS = c(1,2,3), FUN = hCalc, z = Ecoregions$z_values)
h_1 = apply(CFloc_3d_ecoreg, MARGIN = c(1,2,3), FUN = hCalc, z = Ecoregions$z_values)
h_1 = apply(CFloc_3d_ecoreg, MARGIN = c(1,2,3), FUN = (hCalc, z = Ecoregions$z_values)
h_1 = apply(CFloc_3d_ecoreg, MARGIN = c(1,2,3), FUN = hCalc)
h_1 = apply(CFloc_3d_ecoreg, hCalc, y = Ecoregions$z_values)
h_1 = apply(CFloc_3d_ecoreg, MARGIN = c(1,2,3), FUN = hCalc, y = Ecoregions$z_values)
rm(h_1)
h_1 = lapply(CFloc_3d_ecoreg, hCalc, y = Ecoregions$z_values)
head(h_1)
h_1 = lapply(CFloc_3d_ecoreg, hCalc, y = Ecoregions$z_values)[1]
h_1 = lapply(CFloc_3d_ecoreg, hCalc, y = Ecoregions$z_values)[[1]]
h_1 = apply(CFloc_3d_ecoreg, MARGIN = c(2,3), FUN = hCalc, y = Ecoregions$z_values)
h_2 = apply(CFloc_3d_ecoreg, MARGIN = c(1,2,3), FUN = hCalc, y = Ecoregions$z_values)
804*5*6
(804*5*6)^2
19392480/804
length(which(h -h_1 == 0))
rm(h_2)
e = rnorm(1000, mean =0.5)
f = rnorm(1000, mean =0.5)
dimnames(h)
dimnames(h_1)
h["NA1106", ,"Plants"]
h_1["NA1106", ,"Plants"]
?rnomr
?rnorm
CFloc_MC = lapply(1000, rnorm, mean = CFloc_3d_ecoreg, sd = 1)
dim(CFloc_MC[[1]])
CFloc_MC
CFloc_MC = lapply(1000, rnorm, mean = CFloc_3d_ecoreg, sd = 0.01)
CFloc_MC
mean(CFloc_MC)
mean(CFloc_MC[1])
mean(CFloc_MC[[1]])
CFloc_3d_ecoreg[1,1,1]
which(CFloc_3d_ecoreg == mean(CFloc_MC))
which(CFloc_3d_ecoreg == mean(CFloc_MC[[1]]))
which(CFloc_3d_ecoreg == mean(CFloc_MC[[2]]))
CFloc_MC <- list(1)
simulations = 1000
for (i in (1:simulations)) {
CFloc_MC[[i]] = 2*CFloc_3d_ecoreg
}
CFloc_MC[[1]]
length(which(CFloc_MC[[2]]/2 == CFloc_3d_ecoreg))
length(which(CFloc_MC[[999]]/2 == CFloc_3d_ecoreg))
test = rnorm(1000, mean = CFloc_3d_ecoreg)
test = rnorm(1000, mean = CFloc_3d_ecoreg, sd = 0.01)
v3 = c(1:10)
v3 = list(1)
v3[[1]] = rnorm(10)
v3
v3[[1]] = rnorm(10, mean = 1, sd = 0.01)
v3
v3[[1]] = rnorm(10, mean = 5, sd = 1)
v3
v1[1,1,1] = v3
v1[1,1,1]
v1
v1 = array(2, dim = c(3,3,3))
v1[1,1,1] = v3[[1]]
v <- vector(mode = "numeric", length = simulations)
v = rnorm(n = 10, mean = 10, sd = 2)
v
?list
simulations = 1000
v <- vector(mode = "numeric", length = simulations)
v = rnorm(n = 10, mean = 10, sd = 2)
newlist = vector(mode = "list", length = simulations)
for (i in (1:simulations)) {
newlist[[]][i] = v[i]
}
?density
density(CFloc_raw_complete_20[[1]])
library("MonteCarlo")
installed.packages("MonteCarlo")
test = density(CFloc_raw_complete_20[[1]])
test = list(1)
test = array(NA, dim = 10)
test
test = array(NA, length = 10)
test = array(NA, dim = 10)
test(1) = density(CFloc_raw_complete_20[[1]])
test = list(1)
test[[1]] = density(CFloc_raw_complete_20[[1]])
test[[2]] = density(CFloc_raw_complete_20[[1]])
?rkde
?kde
library("ks")
library(ks)
install.packages(ks)
install.packages("ks")
library("ks")
?rkde
typeof(test[[1]])
typeof(test[[1]][1])
test = density(CFloc_raw_complete_20[[1]])
typeof(test)
?kde
kde(CFloc_raw_complete_20[[1]])
density(CFloc_raw_complete_20[[1]])
test = kde(CFloc_raw_complete_20[1])
rm(test)
test = kde(CFloc_raw_complete_20[1])
test = list(1)
test[[1]] = kde(CFloc_raw_complete_20[1])
? rkde
test = rkde(10 fhat = kde(CFloc_raw_complete_20[1]))
test = rkde(10, fhat = kde(CFloc_raw_complete_20[1]))
test = density(CFloc_raw_complete_20[[1]])
test1 = rkde(10, test)
kde(CFloc_raw_complete_20[1])
test = rkde(10, fhat = kde(CFloc_raw_complete_20[[1]]))
test2 = rkde(10, fhat = kde(CFloc_raw_complete_20[[6]]))
test2 = rkde(100, fhat = kde(CFloc_raw_complete_20[[6]]))
hist(test2)
hist(CFloc_raw_complete_20[[6]])
View(CF_local_raw)
View(CF_local_raw)
library(kdensity)
install.packages("kdensity")
library(kdensity)
test = kdensity(CFloc_raw_complete_20[[1]])
test_kdens = kdensity(CFloc_raw_complete_20[[1]])
test_kde = kde(CFloc_raw_complete_20[[1]])
save.image("~/PhD_project/Forest_management/Recalculation_CF/20200219_Recalculation_1.RData")
load("~/PhD_project/Forest_management/Recalculation_CF/20200319_Recalculation_forest.RData")
load("~/PhD_project/Forest_management/Recalculation_CF/20200220_Recalculation_1.RData")
load("~/PhD_project/Forest_management/Recalculation_CF/20200319_Recalculation_forest.RData")
?rlnorm
test = rlnorm(n = 1000, meanlog = log(Ratio_forest_group_birds[[1]]))
test = rlnorm(n = 1000, meanlog = mean(log(Ratio_forest_group_birds[[1]])), sdlog = sd(log(Ratio_forest_group_birds[[1]])))
hist(test)
mean(log(Ratio_forest_group_birds[[1]]))
log(mean(Ratio_forest_group_birds[[1]]))
range(test)
mean(Ratio_forest_group_birds[[1]])
Ratio_forest_group_birds[[1]]
mean(Ratio_forest_group_birds[[1]])
var(Ratio_forest_group_birds[[1]])
range(test)
dev.new()
par(mfrow = c(5, 2))
for (i in (0:(length(Ratio_forest_group_plants)-1))) {
if (i != 8) {
ratio = Ratio_forest_group_plants[[i+1]]
hist(Ratio_forest_group_plants[[i+1]], probability = TRUE, xlab = "Ratio Xe/Xc", main = (paste0("Land use: ", f_use[Ratio_forest_group_in[[2*i+1]][2]], ", Taxa: ",  f_taxa[Ratio_forest_group_in[[2*i+1]][3]])), ylim = c(0,3.5))
#plot(hist_ratio)
#Ratio_forest_plants_lnorm[[i+1]] = dnorm(x = hist_ratio$mids, mean=mean(ratio), sd=sd(ratio))
curve(dlnorm(x, meanlog = log(mean(ratio)), sdlog = log(sd(ratio))), col="red", lwd=2, from = 0, to = max(ratio), add = T)
#lines(x = Ratio_forest_group_plants[[i+1]], y = rlnorm(n = 1000, meanlog = mean(Ratio_forest_group_plants[[i+1]]), sdlog = sd(Ratio_forest_group_plants[[i+1]])), col = 'red', lwd = 2.0)
}
}
log(mean(Ratio_forest_group_plants[[1]]))
log(sd(Ratio_forest_group_plants[[1]]))
mean(Ratio_forest_group_plants[[1]])
sd(Ratio_forest_group_plants[[1]])
mean(log(Ratio_forest_group_plants[[1]]))
sd(log(Ratio_forest_group_plants[[1]]))
load("~/PhD_project/Forest_management/Recalculation_CF/20200319_Recalculation_forest.RData")
load("~/PhD_project/Forest_management/Recalculation_CF/20200319_Recalculation_forest.RData")
hist(Ratio_forest_group_birds[[2]])
hist(log(Ratio_forest_group_birds[[2]])
)
?hist
test = rlnorm(1000, meanlog = log(mean(Ratio_forest_group_birds[[2]])), sdlog = log(sd(Ratio_forest_group_birds[[2]])))
hist(test)
test1 = hist(test)
min(test)
max(test)
?rlnorm
test = rlnorm(1000, meanlog = mean(log(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]])))
hist(test)
log(mean(Ratio_forest_group_birds[[2]]))
(mean(Ratio_forest_group_birds[[2]]))
(mean(log(Ratio_forest_group_birds[[2]])))
log(sd(Ratio_forest_group_birds[[2]]))
sd(log(Ratio_forest_group_birds[[2]]))
sd(Ratio_forest_group_birds[[2]])
sd(Ratio_forest_group_birds[[2]])
sd(Ratio_forest_group_birds[[1]])
sd(Ratio_forest_group_plants[[1]])
Ratio_forest_group_plants[[1]]
hist(Ratio_forest_group_birds[[2]])
curve(dlnorm(x, meanlog = mean(log(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]])), col="red", lwd=2, add = T)
)
curve(dlnorm(x, meanlog = mean(log(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]])), col="red", lwd=2, add = T))
curve(dlnorm(x, meanlog = mean(log(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]]))), col="red", lwd=2, add = T))
curve(dlnorm(x, meanlog = mean(log(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]]))), col="red", lwd=2, add = T)
hist(Ratio_forest_group_birds[[2]], freq = F)
curve(dlnorm(x, meanlog = mean(log(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]]))), col="red", lwd=2, add = T)
curve(dlnorm(x, meanlog = mean(Ratio_forest_group_birds[[2]]), sdlog = sd(Ratio_forest_group_birds[[2]])), col="red", lwd=2, add = T)
curve(dlnorm(x, meanlog = log(mean(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]]))), col="red", lwd=2, add = T)
curve(dlnorm(x, meanlog = exp(mean(Ratio_forest_group_birds[[2]])), sdlog = exp(sd(Ratio_forest_group_birds[[2]]))), col="red", lwd=2, add = T)
dev.new()
curve(dlnorm(x, meanlog = 0.7, sdlog = 0.5),  col="red", lwd=2)
curve(dlnorm(x, meanlog = 0.7, sdlog = 0.5),  col="red", lwd=2)
?curve
curve(dlnorm(x, meanlog = 0.7, sdlog = 0.5),  col="red", lwd=2, xlim = c(0,5))
curve(dlnorm(x, meanlog = 0.7, sdlog = 0.5),  col="red", lwd=2, xlim = c(0,10))
Ratio_forest_group_birds[[2]]
hist(Ratio_forest_group_birds[[2]])
setwd("C:/Users/Rosa/Documents/PhD_project/Forest_management/Recalculation_CF")
write.csv(Ratio_forest_group_birds[[2]], "agroforestry_birds.csv")
length(Ratio_forest_group_birds[[2]])
write.table(Ratio_forest_group_birds[[2]], "agroforestry_birds.txt", sep = "\t")
hist(Ratio_forest_group_birds[[2]])
sd(Ratio_forest_group_birds[[2]])
sd(log(Ratio_forest_group_birds[[2]]))
sd(Ratio_forest_group_birds[[2]])
median(rlnorm(1000, meanlog = mean(log(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]]))))
median(rlnorm(1000, meanlog = mean(log(Ratio_forest_group_birds[[7]])), sdlog = sd(log(Ratio_forest_group_birds[[7]]))))
hist(rlnorm(1000, meanlog = mean(log(Ratio_forest_group_birds[[7]])), sdlog = sd(log(Ratio_forest_group_birds[[7]]))))
hist(rlnorm(1000, meanlog = mean(log(Ratio_forest_group_birds[[2]])), sdlog = sd(log(Ratio_forest_group_birds[[2]]))))
hist(Ratio_forest_group_birds[[5]])
hist?
?hist
hist(Ratio_forest_group_birds[[5]], breaks = 12)
ratio = Ratio_forest_group_birds[[5]]
test = rlnorm(1000, meanlog = mean(log(ratio)), sdlog = sd(log(ratio)))
hist(test)
test1 = hist(test)
range(ratio)
?solve
interval = range(ratio)[2]-range(ratio)[1]
interval*0.025
lower2.5 = interval*0.025
upper97.5 = interval*0.975
mug = sqrt(lower2.5*upper97.5)
mug = sqrt(upper97.5/lower2.5)
mug = sqrt(lower2.5*upper97.5)
sdg = sqrt(upper97.5/lower2.5)
mu = mean(log(ratio))
sigma = (sd(log(ratio)))
sigmag = sqrt(upper97.5/lower2.5)
rm(sd)
rm(sdg)
mug_real = exp(mu)
sigmag_real = exp(sigma)
mug
mug_real
rm(mug_real)
rm(sigmag_real)
mu_calc = log(mug)
sigma_calc = log(sigmag)
mu
sigma
hist(log(ratio))
mu_calc
sigma_calc
sigmag = (upper97.5/lower2.5)^(1/4)
sigma_calc = log(sigmag)
sigma_calc
dev.new()
par(1)
curve(dlnorm(x, meanlog = log(mean(ratio)), sdlog = log(sd(ratio))), col="red", lwd=2, add = T)
hist(ratio)
curve(dlnorm(x, meanlog = mean(log(ratio)), sdlog = sd(log(ratio))), col="red", lwd=2, add=TRUE)
hist(ratio, freq = F)
curve(dlnorm(x, meanlog = mean(log(ratio)), sdlog = sd(log(ratio))), col="red", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = log(mug), sdlog = log(sigmag), col="red", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = log(mug), sdlog = log(sigmag)), col="red", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = mu, sdlog = sigma), col="blue", lwd=2, add=TRUE)
sigma
sigma_calc
mu
mu_calc
mug
log(mug)
hist(ratio, freq = F, xlim = c(-3,3), xlim = c(0,3))
hist(ratio, freq = F, xlim = c(-3,3), ylim = c(0,3))
curve(dlnorm(x, meanlog = mu, sdlog = sigma), col="blue", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = mug_calc, sdlog = sigma_calc, col="red", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = mug_calc, sdlog = sigma_calc), col="red", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = mu_calc, sdlog = sigma_calc), col="red", lwd=2, add=TRUE)
hist(ratio, freq = F, xlim = c(-3,3), ylim = c(0,4))
curve(dlnorm(x, meanlog = mu, sdlog = sigma), col="blue", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = mu_calc, sdlog = sigma_calc), col="red", lwd=2, add=TRUE)
0.5^2
0.5^(1.96)
sigmag_new = (upper97.5/lower2.5)^((1/2) + (1/1.96))
sigmag_new
upper97.5
lower2.5
(1/2) + (1/1.96)
1/1.96
sigmag_new = (upper97.5/lower2.5)^((1/2)*(1/1.96))
sigmag_new
sigmag
sigma_calc_new = log(sigmag_new)
curve(dlnorm(x, meanlog = mu_calc, sdlog = sigma_calc_new), col="green", lwd=2, add=TRUE)
min(ratio)
max(ratio)
test = rlnorm(1000, meanlog = mean(log(ratio)), sdlog = sd(log(ratio)))
range(test)
min = range(test)[1]
max = range(test)[2]
range_t = max - min
lower2.5_t = min + 0.025*range_t
upper97.5_t = min + 0.975*range_t
mug_t = sqrt(lower2.5_t*upper97.5_t)
sigmag_t = (upper97.5_t/lower2.5_t)^(1/4)
mu_t = log(mug_t)
sigma_t = log(sigmag_t)
hist(test)
hist(test, freq = F)
curve(dlnorm(x, meanlog = mean(log(ratio)), sdlog = sd(log(ratio))), col="red", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = mu_t, sdlog = sigmag_t), col="blue", lwd=2, add=TRUE)
mu_t
sigmag_t
mu
sigma
min
mu_calc
sigma_calc
hist(test, freq = F)
curve(dlnorm(x, meanlog = mean(log(ratio)), sdlog = sd(log(ratio))), col="red", lwd=2, add=TRUE)
curve(dlnorm(x, meanlog = mu_t, sdlog = sigma_t), col="blue", lwd=2, add=TRUE)
range(ratio)
sim_t = rlnorm(1000, meanlog = mu_t, sdlog = sigma_t)
hist(sim_t, freq = F)
y = curve(dlnorm(x, meanlog = mu_t, sdlog = sigma_t), col="blue", lwd=2, add=TRUE)
y
length(y$y)
curve_t = curve(dlnorm(x, meanlog = mu_t, sdlog = sigma_t), col="blue", lwd=2, add=TRUE)
curve_sim = curve(dlnorm(x, meanlog = mean(log(ratio)), sdlog = sd(log(ratio))), col="red", lwd=2, add=TRUE)
curve_sim
curve_t$x-curve_sim$x
ks.test(curve_sim$y, curve_t$y)
?chisq.test
chisq.test(curve_sim$y, curve_t$y)
setwd("C:/Users/Rosa/Documents/PhD_project/Forest_management/grouped_land_use_files")
search()
