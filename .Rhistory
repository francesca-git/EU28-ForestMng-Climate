scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
# l = length(df)
l = length(df)
denom = "mean"
comparison_df <- rel.diff(df, levs, denom)
comparison_df <- comparison_df %>% pivot_longer(cols = levs, names_to = "Category", values_to = "Values")
comparison_df$Reference = factor(comparison_df$Reference, levels = levs, labels = labs)
comparison_df$Category = factor(comparison_df$Category, levels = levs, labels = labs)
pal <- "RdBu"
png(file = paste0("./rel-diff", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
comparison_df_noRIL <- comparison_df %>% filter(Reference != "Reduced Impact Logging" & Category != "Reduced Impact Logging")
png(file = paste0("./rel-diff_noRIL", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df_noRIL, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x= element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
l = length(df)
denom = "mean"
comparison_df <- rel.diff(df, levs, denom)
comparison_df <- comparison_df %>% pivot_longer(cols = levs, names_to = "Category", values_to = "Values")
comparison_df$Reference = factor(comparison_df$Reference, levels = levs, labels = labs)
comparison_df$Category = factor(comparison_df$Category, levels = levs, labels = labs)
pal <- "RdBu"
png(file = paste0("./rel-diff", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 11),
legend.title = element_blank(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
l = length(df)
denom = "mean"
comparison_df <- rel.diff(df, levs, denom)
comparison_df <- comparison_df %>% pivot_longer(cols = levs, names_to = "Category", values_to = "Values")
comparison_df$Reference = factor(comparison_df$Reference, levels = levs, labels = labs)
comparison_df$Category = factor(comparison_df$Category, levels = levs, labels = labs)
pal <- "RdBu"
png(file = paste0("./rel-diff", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 11),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
comparison_df_noRIL <- comparison_df %>% filter(Reference != "Reduced Impact Logging" & Category != "Reduced Impact Logging")
png(file = paste0("./rel-diff_noRIL", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df_noRIL, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x= element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 11),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
l = length(df)
denom = "mean"
comparison_df <- rel.diff(df, levs, denom)
comparison_df <- comparison_df %>% pivot_longer(cols = levs, names_to = "Category", values_to = "Values")
comparison_df$Reference = factor(comparison_df$Reference, levels = levs, labels = labs)
comparison_df$Category = factor(comparison_df$Category, levels = levs, labels = labs)
pal <- "RdBu"
png(file = paste0("./rel-diff", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 12),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
comparison_df_noRIL <- comparison_df %>% filter(Reference != "Reduced Impact Logging" & Category != "Reduced Impact Logging")
png(file = paste0("./rel-diff_noRIL", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df_noRIL, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x= element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 12),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
LOG = FALSE
Cat = 4           #1: Managed forests 2: Pastures and crops 3:  all land use classes from Chaudhary 2018  4: all land use classes from Chaudhary 2015
if (Cat == 1) {
df <- read.csv("./Chaudhary_2018_ManagedForest_Plantations.csv", header = TRUE)
levs <- c("CF_RIL", "CF_SelectiveLogging", "CF_ClearCut", "CF_MinPlantation", "CF_LtPlantation", "CF_IntPlantation")
labs <-  c("Reduced Impact Logging", "Selective logging", "Clear-cut", "Minimal Plantation", "Light Plantation", "Intense Plantation")
middle_name <- "_ManagedForests"
} else if(Cat == 2) {
df <- read.csv("./Chaudhary_2018_Pastures_Crops.csv", header = TRUE)
levs <- c("CF_MinPasture", "CF_LtPasture", "CF_IntPasture", "CF_MinCrop", "CF_LtCrop", "CF_IntCrop")
labs <-  c("Pasture - Minimal use", "Pasture - Light use", "Pasture - Intense use", "Crops - Minimal use", "Crops - Light use", "Crop - Intense use")
middle_name <- "_Pastures-Crops"
} else if(Cat == 3) {
df <- read.csv("./Chaudhary_2018_all-land-uses.csv", header = TRUE)
levs <- c("CF_RIL", "CF_SelectiveLogging", "CF_ClearCut", "CF_MinPlantation", "CF_LtPlantation", "CF_IntPlantation",
"CF_MinPasture", "CF_LtPasture", "CF_IntPasture", "CF_MinCrop", "CF_LtCrop", "CF_IntCrop", "CF_MinUrban", "CF_LtUrban", "CF_IntUrban")
labs <-  c("Reduced Impact Logging", "Selective logging", "Clear-cut", "Minimal Plantation", "Light Plantation",
"Intense Plantation", "Pasture - Minimal use", "Pasture - Light use", "Pasture - Intense use", "Crops - Minimal use",
"Crops - Light use", "Crop - Intense use", "Urban - Minimal", "Urban - Light", "Urban - Intense")
middle_name <- "_all"
} else if(Cat == 4) {
df <- read.csv("./Chaudhary_2015_all-land-uses.csv", header = TRUE)
levs <- c("CF_Annual", "CF_Permanent", "CF_Pasture", "CF_Urban", "CF_ExtForest", "CF_IntForest")
labs <-  c("Annual crops", "Permanent crops", "Pastures", "Urban", "Extensive forestry", "Intensive forestry")
middle_name <- "_all_2015"
}
df[sapply(df, is.nan)] <- NA
means_dec <- df %>% summarise_if(is.numeric, mean, na.rm = TRUE)
sds_dec <- df %>% summarise_if(is.numeric, sd, na.rm = TRUE)
print(means_dec, digits = 2)
print(sds_dec, digits = 2)
if (LOG == TRUE) {
df <- df %>% mutate_if(is.numeric, ~log10(.))
expr_labs <- expression("log"[10]*"(PDF/m"^2*")")
end_name = "_log"
hist_xlim = c(-17,-9)
} else if (LOG == FALSE) {
expr_labs <- expression("PDF/m"^2)
end_name = ""
hist_xlim = c(0,1.0e-12)
}
df[df == -Inf] <- NA                          # 6 values are == -Inf
df_longer <- data.frame(pivot_longer(df, cols = all_of(levs), names_to = "Category", values_to = "Values"))
df_longer[sapply(df_longer, is.nan)] <- NA
df_longer$Category = factor(df_longer$Category, levels = levs, labels = labs)
l = length(df)
denom = "mean"
comparison_df <- rel.diff(df, levs, denom)
comparison_df <- comparison_df %>% pivot_longer(cols = levs, names_to = "Category", values_to = "Values")
comparison_df$Reference = factor(comparison_df$Reference, levels = levs, labels = labs)
comparison_df$Category = factor(comparison_df$Category, levels = levs, labels = labs)
pal <- "RdBu"
png(file = paste0("./rel-diff", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 12),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
comparison_df_noRIL <- comparison_df %>% filter(Reference != "Reduced Impact Logging" & Category != "Reduced Impact Logging")
png(file = paste0("./rel-diff_noRIL", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df_noRIL, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x= element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 12),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
LOG = FALSE
Cat = 5           #1: Managed forests 2: Pastures and crops 3:  all land use classes from Chaudhary 2018  4: all land use classes from Chaudhary 2015 5: all land use classes from Chaudhary 2016 (LCImpact)
if (Cat == 1) {
df <- read.csv("./Chaudhary_2018_ManagedForest_Plantations.csv", header = TRUE)
levs <- c("CF_RIL", "CF_SelectiveLogging", "CF_ClearCut", "CF_MinPlantation", "CF_LtPlantation", "CF_IntPlantation")
labs <-  c("Reduced Impact Logging", "Selective logging", "Clear-cut", "Minimal Plantation", "Light Plantation", "Intense Plantation")
middle_name <- "_ManagedForests"
} else if(Cat == 2) {
df <- read.csv("./Chaudhary_2018_Pastures_Crops.csv", header = TRUE)
levs <- c("CF_MinPasture", "CF_LtPasture", "CF_IntPasture", "CF_MinCrop", "CF_LtCrop", "CF_IntCrop")
labs <-  c("Pasture - Minimal use", "Pasture - Light use", "Pasture - Intense use", "Crops - Minimal use", "Crops - Light use", "Crop - Intense use")
middle_name <- "_Pastures-Crops"
} else if(Cat == 3) {
df <- read.csv("./Chaudhary_2018_all-land-uses.csv", header = TRUE)
levs <- c("CF_RIL", "CF_SelectiveLogging", "CF_ClearCut", "CF_MinPlantation", "CF_LtPlantation", "CF_IntPlantation",
"CF_MinPasture", "CF_LtPasture", "CF_IntPasture", "CF_MinCrop", "CF_LtCrop", "CF_IntCrop", "CF_MinUrban", "CF_LtUrban", "CF_IntUrban")
labs <-  c("Reduced Impact Logging", "Selective logging", "Clear-cut", "Minimal Plantation", "Light Plantation",
"Intense Plantation", "Pasture - Minimal use", "Pasture - Light use", "Pasture - Intense use", "Crops - Minimal use",
"Crops - Light use", "Crop - Intense use", "Urban - Minimal", "Urban - Light", "Urban - Intense")
middle_name <- "_all"
} else if(Cat == 4) {
df <- read.csv("./Chaudhary_2015_all-land-uses.csv", header = TRUE)
levs <- c("CF_Annual", "CF_Permanent", "CF_Pasture", "CF_Urban", "CF_ExtForest", "CF_IntForest")
labs <-  c("Annual crops", "Permanent crops", "Pastures", "Urban", "Extensive forestry", "Intensive forestry")
middle_name <- "_all_2015"
} else if(Cat == 5) {
df <- read.csv("./Chaudhary_2016_all-land-uses.csv", header = TRUE)
levs <- c("CF_Annual", "CF_Permanent", "CF_Pasture", "CF_Urban", "CF_ExtForest", "CF_IntForest")
labs <-  c("Annual crops", "Permanent crops", "Pastures", "Urban", "Extensive forestry", "Intensive forestry")
middle_name <- "_all_2016"
}
df[sapply(df, is.nan)] <- NA
means_dec <- df %>% summarise_if(is.numeric, mean, na.rm = TRUE)
sds_dec <- df %>% summarise_if(is.numeric, sd, na.rm = TRUE)
print(means_dec, digits = 2)
print(sds_dec, digits = 2)
if (LOG == TRUE) {
df <- df %>% mutate_if(is.numeric, ~log10(.))
expr_labs <- expression("log"[10]*"(PDF/m"^2*")")
end_name = "_log"
hist_xlim = c(-17,-9)
} else if (LOG == FALSE) {
expr_labs <- expression("PDF/m"^2)
end_name = ""
hist_xlim = c(0,1.0e-12)
}
df[df == -Inf] <- NA                          # 6 values are == -Inf
df_longer <- data.frame(pivot_longer(df, cols = all_of(levs), names_to = "Category", values_to = "Values"))
df_longer[sapply(df_longer, is.nan)] <- NA
df_longer$Category = factor(df_longer$Category, levels = levs, labels = labs)
l = length(df)
denom = "mean"
comparison_df <- rel.diff(df, levs, denom)
comparison_df <- comparison_df %>% pivot_longer(cols = levs, names_to = "Category", values_to = "Values")
comparison_df$Reference = factor(comparison_df$Reference, levels = levs, labels = labs)
comparison_df$Category = factor(comparison_df$Category, levels = levs, labels = labs)
pal <- "RdBu"
png(file = paste0("./rel-diff", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 12),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
comparison_df_noRIL <- comparison_df %>% filter(Reference != "Reduced Impact Logging" & Category != "Reduced Impact Logging")
png(file = paste0("./rel-diff_noRIL", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df_noRIL, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x= element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 12),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
df[sapply(df, is.nan)] <- NA
means_dec <- df %>% summarise_if(is.numeric, mean, na.rm = TRUE)
sds_dec <- df %>% summarise_if(is.numeric, sd, na.rm = TRUE)
print(means_dec, digits = 2)
print(sds_dec, digits = 2)
if (LOG == TRUE) {
df <- df %>% mutate_if(is.numeric, ~log10(.))
expr_labs <- expression("log"[10]*"(PDF/m"^2*")")
end_name = "_log"
hist_xlim = c(-17,-9)
} else if (LOG == FALSE) {
expr_labs <- expression("PDF/m"^2)
end_name = ""
hist_xlim = c(0,1.0e-12)
}
df[df == -Inf] <- NA                          # 6 values are == -Inf
df_longer <- data.frame(pivot_longer(df, cols = all_of(levs), names_to = "Category", values_to = "Values"))
df_longer[sapply(df_longer, is.nan)] <- NA
df_longer$Category = factor(df_longer$Category, levels = levs, labels = labs)
l = length(df)
denom = "mean"
comparison_df <- rel.diff(df, levs, denom)
comparison_df <- comparison_df %>% pivot_longer(cols = levs, names_to = "Category", values_to = "Values")
comparison_df$Reference = factor(comparison_df$Reference, levels = levs, labels = labs)
comparison_df$Category = factor(comparison_df$Category, levels = levs, labels = labs)
pal <- "RdBu"
png(file = paste0("./rel-diff", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 12),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
comparison_df_noRIL <- comparison_df %>% filter(Reference != "Reduced Impact Logging" & Category != "Reduced Impact Logging")
png(file = paste0("./rel-diff_noRIL", middle_name, end_name, "_", denom, ".png"), width = 12, height = 12, res = 600, units = "in")
figure <- ggplot(comparison_df_noRIL, aes(Category, Reference, fill = Values)) +
geom_tile() +
theme(axis.text.x= element_text(angle = 90), axis.text = element_text(size = 17),
axis.title = element_text(size = 20), legend.text = element_text(size = 12),
legend.title = element_text(size = 15)) + #, axis.title = element_blank()) +
scale_fill_distiller(palette = pal, na.value = "gray96")
figure
dev.off()
LOG = TRUE
df[sapply(df, is.nan)] <- NA
means_dec <- df %>% summarise_if(is.numeric, mean, na.rm = TRUE)
sds_dec <- df %>% summarise_if(is.numeric, sd, na.rm = TRUE)
print(means_dec, digits = 2)
print(sds_dec, digits = 2)
if (LOG == TRUE) {
df <- df %>% mutate_if(is.numeric, ~log10(.))
expr_labs <- expression("log"[10]*"(PDF/m"^2*")")
end_name = "_log"
hist_xlim = c(-17,-9)
} else if (LOG == FALSE) {
expr_labs <- expression("PDF/m"^2)
end_name = ""
hist_xlim = c(0,1.0e-12)
}
df[df == -Inf] <- NA                          # 6 values are == -Inf
df_longer <- data.frame(pivot_longer(df, cols = all_of(levs), names_to = "Category", values_to = "Values"))
df_longer[sapply(df_longer, is.nan)] <- NA
df_longer$Category = factor(df_longer$Category, levels = levs, labels = labs)
LOG = TRUE
Cat = 5           #1: Managed forests 2: Pastures and crops 3:  all land use classes from Chaudhary 2018  4: all land use classes from Chaudhary 2015 5: all land use classes from Chaudhary 2016 (LCImpact)
if (Cat == 1) {
df <- read.csv("./Chaudhary_2018_ManagedForest_Plantations.csv", header = TRUE)
levs <- c("CF_RIL", "CF_SelectiveLogging", "CF_ClearCut", "CF_MinPlantation", "CF_LtPlantation", "CF_IntPlantation")
labs <-  c("Reduced Impact Logging", "Selective logging", "Clear-cut", "Minimal Plantation", "Light Plantation", "Intense Plantation")
middle_name <- "_ManagedForests"
} else if(Cat == 2) {
df <- read.csv("./Chaudhary_2018_Pastures_Crops.csv", header = TRUE)
levs <- c("CF_MinPasture", "CF_LtPasture", "CF_IntPasture", "CF_MinCrop", "CF_LtCrop", "CF_IntCrop")
labs <-  c("Pasture - Minimal use", "Pasture - Light use", "Pasture - Intense use", "Crops - Minimal use", "Crops - Light use", "Crop - Intense use")
middle_name <- "_Pastures-Crops"
} else if(Cat == 3) {
df <- read.csv("./Chaudhary_2018_all-land-uses.csv", header = TRUE)
levs <- c("CF_RIL", "CF_SelectiveLogging", "CF_ClearCut", "CF_MinPlantation", "CF_LtPlantation", "CF_IntPlantation",
"CF_MinPasture", "CF_LtPasture", "CF_IntPasture", "CF_MinCrop", "CF_LtCrop", "CF_IntCrop", "CF_MinUrban", "CF_LtUrban", "CF_IntUrban")
labs <-  c("Reduced Impact Logging", "Selective logging", "Clear-cut", "Minimal Plantation", "Light Plantation",
"Intense Plantation", "Pasture - Minimal use", "Pasture - Light use", "Pasture - Intense use", "Crops - Minimal use",
"Crops - Light use", "Crop - Intense use", "Urban - Minimal", "Urban - Light", "Urban - Intense")
middle_name <- "_all"
} else if(Cat == 4) {
df <- read.csv("./Chaudhary_2015_all-land-uses.csv", header = TRUE)
levs <- c("CF_Annual", "CF_Permanent", "CF_Pasture", "CF_Urban", "CF_ExtForest", "CF_IntForest")
labs <-  c("Annual crops", "Permanent crops", "Pastures", "Urban", "Extensive forestry", "Intensive forestry")
middle_name <- "_all_2015"
} else if(Cat == 5) {
df <- read.csv("./Chaudhary_2016_all-land-uses.csv", header = TRUE)
levs <- c("CF_Annual", "CF_Permanent", "CF_Pasture", "CF_Urban", "CF_ExtForest", "CF_IntForest")
labs <-  c("Annual crops", "Permanent crops", "Pastures", "Urban", "Extensive forestry", "Intensive forestry")
middle_name <- "_all_2016"
}
df[sapply(df, is.nan)] <- NA
means_dec <- df %>% summarise_if(is.numeric, mean, na.rm = TRUE)
sds_dec <- df %>% summarise_if(is.numeric, sd, na.rm = TRUE)
print(means_dec, digits = 2)
print(sds_dec, digits = 2)
if (LOG == TRUE) {
df <- df %>% mutate_if(is.numeric, ~log10(.))
expr_labs <- expression("log"[10]*"(PDF/m"^2*")")
end_name = "_log"
hist_xlim = c(-17,-9)
} else if (LOG == FALSE) {
expr_labs <- expression("PDF/m"^2)
end_name = ""
hist_xlim = c(0,1.0e-12)
}
df[df == -Inf] <- NA                          # 6 values are == -Inf
df_longer <- data.frame(pivot_longer(df, cols = all_of(levs), names_to = "Category", values_to = "Values"))
df_longer[sapply(df_longer, is.nan)] <- NA
df_longer$Category = factor(df_longer$Category, levels = levs, labels = labs)
means <- df %>% summarise_if(is.numeric, mean, na.rm = TRUE)
sds <- df %>% summarise_if(is.numeric, sd, na.rm = TRUE)
stat_data <- bind_cols(data.frame(t(means)), data.frame(t(3*sds)))
names(stat_data) <- c("mean", "CI")
stat_data$Category <- row.names(stat_data)
row.names(stat_data) <- NULL
stat_data$Category = factor(stat_data$Category, levels = levs, labels = labs)
png(file = paste0("./mean_sd", middle_name, end_name, ".png"), width = 12, height = 6, res = 600, units = "in")
figure <- ggplot(stat_data, aes(x = Category, y = mean, group = Category, color = Category)) + # filter(df_longer, Values < 5e-12)
geom_point() +
geom_errorbar(aes(ymin = mean - unlist(CI), ymax = unlist(mean) + unlist(CI)), width=.2)
theme(axis.text.x= element_text(size = 10, angle = 90))
figure
dev.off()
png(file = paste0("./boxplots", middle_name, end_name, ".png"), width = 12, height = 6, res = 600, units = "in")
figure <- ggplot(df_longer, aes(x = Category, y = Values, group = Category, color = Category)) + # filter(df_longer, Values < 5e-12)
geom_boxplot(width = 0.5) +
theme(axis.text.x= element_text(size = 10, angle = 90))
figure
dev.off()
col_CF <- names(df %>% select(-eco_code))
dev.new()
png(file = paste0("./histograms", middle_name, end_name, ".png"), width = 12, height = 6, res = 600, units = "in")
par(mfrow = c(2,3))
if (Cat == 3) {par(mfrow = c(3,6))}
n <- 0
for (i in col_CF) {
data <- df[,i]
n <- n + 1
if(LOG == FALSE) {data <- df[df[n+1] < 1.0e-12, i]}
hist(data, main = labs[n], xlab = expr_labs, xlim = hist_xlim)
}
dev.off()
png(file = paste0("CF_ecoregions", middle_name, end_name, ".png"), width = 12, height = 6, res = 600, units = "in")
figure <- ggplot(data = df_longer, aes(x = eco_code, y = Values, color = Category, linetype = Category)) +
geom_point(size = 1) +
theme_classic() +
labs(x = "Ecoregions", y = expr_labs) +
theme(legend.position = "bottom", legend.text = element_text(size = 13), axis.text.x = element_blank())
figure
dev.off()
setwd("C:/Users/Rosa/Documents/GitHub/forest-management")
library(pacman)
p_load(dplyr, tidyr, abind, tidyverse, stringr)  # dataframe management and string management
p_load(ggplot2, colorspace, scico, viridis, RColorBrewer, gridExtra, nord, ggpubr, sf, sp, rgdal) # plotting
select <- dplyr::select
source("./aggregation_plotting/scripts_aggregation/aggregate_results.R")           # functions to convert the results of the model in a single .Rdata file
source("./aggregation_plotting/scripts_aggregation/global_Rdata-to-csv.R")                 # functions to convert the .Rdata file to several .csv for impacts of global land use
source("./aggregation_plotting/scripts_aggregation/areas_Rdata-to-csv.R")                   # functions to convert the .Rdata file to several .csv for areas
source("./aggregation_plotting/scripts_charts/global_time-series.R")                            # functions to plot the impacts of global land use
source("./aggregation_plotting/scripts_charts/map_areas.R")                            # functions to plot the impacts of global land use
source("./aggregation_plotting/scripts_aggregation/EU_Rdata-to-csv.R")                      # functions to convert the .Rdata file to several .csv for EU impacts
source("./aggregation_plotting/scripts_charts/EU_barplots.R")                                   # functions to plot the impacts of EU
source("./aggregation_plotting/scripts_charts/map_PDF.R")                                       # functions to plot the impacts on a map
source("./aggregation_plotting/scripts_aggregation/slost_Globiom.R")
source("./aggregation_plotting/scripts_aggregation/wood.R")
# identify the results to access
type_of_data <- "impacts"       # "impacts" or "areas"
case <- "cutoff"              # cutoff, nocutoff, cutoff_timber, nocutoff_timber, LCImpact, Chaudhary2015 or Chaudhary2018
subcase <- ""                   # e.g. plants, mammals or birds (end of the csv files)
case_areas <- "notimber"        # "notimber" or "timber"
energy_exports <- "EPnoex"    # "ex" (Footprint includes energy plantations, Internal EU does not include energy crops but includes exports)
# "EPnoex" (Footprint includes energy plantations and Internal EU includes energy crop and exports)
# "noEPnoex" (Footprint does not include energy plantations, Internal EU does not include nor energy crop nor exports)
if(subcase == "") {
case_subcase <- paste0("_", case)
} else {case_subcase <- paste0("_", case, "_", subcase)}
CI <- FALSE # TRUE or FALSE
year = "2100"
############################ RESULTS DIRECTLY FROM THE MODEL ##############################
# access the results obtained directly from the model
folder_slost = paste0("./results/slost/species-lost_", case, "/")
file_slost = "Slost_mg_"     # in the call of the file the year and the subcase are added
folder_areas = paste0("./results/areas/", case_areas , "/mg/disaggregated/")
############################ ACCESS THE FOLDER WHERE RESULTS ARE AGGREGATED AND PLOTTED ##############################
# calculation -> PLOTTING -> RESULTS -> SUBFOLDER, whose name marks may refer to different types of results (with cutoff, without cutoff, with timber, without timber, etc)
# -> CSV or PLOTS or .Rdata files
mainfolder <- "./aggregation_plotting/results_plots-csv/"
subfolder <- paste0(case, "/")  # subfolder from where the files must be loaded or to where the files must be saved
plots_path <- paste0(mainfolder, subfolder,"plots/")  # path used to save the plots (generated using the .csv data)
file_rdata <- paste0("sums", case_subcase, ".Rdata")
file_rdata_areas <- paste0("areas_", case_areas, ".Rdata")
rdata_path <- paste0(mainfolder, subfolder, file_rdata)
rdata_path_areas <- paste0(mainfolder, "areas/", case_areas, "/", file_rdata_areas)
csv_path <- paste0(mainfolder, subfolder,"csv/")      # path used to save csv (generated using the .Rdata)
csv_path_areas <-  paste0(mainfolder, "areas/", case_areas, "/")     # path used to save csv with data on areas (generated using the .Rdata)
aggregate.results(folder_slost, rdata_path, case_subcase) # aggregate_results.R
temp = list.files(path = paste0(folder_slost) , pattern = paste0("*", case_subcase, ".csv"), full.names = TRUE)   # save as list the paths of all .csv files in the selected folder
myfiles = lapply(temp, read.csv)            # read the files, create a list where in each element is loaded one of the file as df
rm(temp)
tstep = 2100
names(myfiles) = sapply(tstep, FUN = toString)  # rename each element of the list with the corresponding time step
for_management = c("noAFM", "AFMfree", "AFM25", "AFM50", "AFM75", "AFM100")                                                                                     # new names for management scenarios
# forests = c("ClearCut_EU_median","ClearCut_im_median", "ClearCut_ex_median", "Retention_EU_median", "PlantationFuel_im_median", "SelectionSystem_EU_median")    # columns to be renamed to be handled easier
# Join medians and CI
results_in <- lapply(myfiles, function(x) data.frame(x))
# Sum species lost over the ecoregions, such that there is a single value per Scenario and land use. The result is a list of dataframes, one for each year.
# rename columns and factors
## !! the order of the operations in the next block must remain the same
results_in <- lapply(results_in, function(x) separate(x, Scenario, into = c("Group", "Forest_use", "Management"), sep = "_") %>%                                       # separate the column Scenario into three columns
mutate(Management = str_replace(Management,"noAF", "noAFM"), Management = str_replace(Management,"AF0", "AFMfree"),  # rename the factors in the column with management information
Management = str_replace(Management,"AF25", "AFM25"), Management = str_replace(Management,"AF50", "AFM50"),
Management = str_replace(Management,"AF75", "AFM75"), Management = str_replace(Management,"AF100", "AFM100"),
Group = str_replace(Group, "RCP", "RCP2.6")) %>%                                                              # rename the rcp scenario
unite("Scenario", Group:Management, sep = "_"))                                                                   # re-merge the columns describing the scenario to keep it as it was initially
# compute the sum over the ecoregions
results = lapply(results_in, function(x)  select(x, -Ecoregion, -Year) %>%
group_by(Scenario) %>%
summarise_if(is.numeric, sum, na.rm = TRUE) %>%                                                          # sum
mutate_if(is.numeric, ~(.*100)) %>%                                                                    # convert to percentage
separate(Scenario, into = c("Group", "Forest_use", "Management"), sep = "_") %>%                     # separate the column Scenario
mutate(Group = factor(Group), Forest_use = factor(Forest_use), Management = factor(Management)) %>% # keep the factor feature
arrange(match(Management, for_management), Group, Forest_use)  )                                 # arrange the data according column Management, as displaied in for_management
results = lapply(results, function(x) data.frame(x))
# sum over land uses
sums <- lapply(results, function(x) mutate(x, Sum_median = rowSums(select(x, contains("median")), na.rm = TRUE)) %>%            # sum the columns, except the ones describing the scenario
mutate(Sum_lower95 =  rowSums(select(x, contains("lower95")), na.rm = TRUE)) %>%
mutate(Sum_upper95 = rowSums(select(x, contains("upper95")), na.rm = TRUE))  %>%
select(Group, Forest_use, Management, Sum_median, Sum_lower95, Sum_upper95))       # select only the useful columns
sums = lapply(sums, function(x) data.frame(x))
# # # test ====
# if (abs(rowSums(results[[1]][1, 4:28]) - sums[[1]][1,4]) > 1e-16) {stop("ERROR in the calculation of the sums")}
# if (length(results[[1]]) > 28) {
#   if((abs(rowSums(results[[1]][1, 29:53]) - sums[[1]][1,5]) > 1e-16) |
#         (abs(rowSums(results[[1]][1, 54:78]) - sums[[1]][1,6] > 1e-16))) {stop("ERROR in the calculation of the sums")}
#   }
# test ====
y <- sample(1:11, 1)                        # random year
r <- sample(1:nrow(results[[1]]), 1)        # random row
if ((rowSums(results[[y]][r, 4:31], na.rm = TRUE) - sums[[y]][r,4]) > 1e-16) {stop("ERROR in the calculation of the sums (median)")}
if(length(results[[y]]) > 31) {
if ((rowSums(results[[y]][r, 32:59], na.rm = TRUE) - sums[[y]][r,5] > 1e-16) |
(rowSums(results[[y]][r, 60:87], na.rm = TRUE) - sums[[y]][r,6] > 1e-16))  {stop("ERROR in the calculation of the sums (CI)")}
}
# ====
results_median <- lapply(results, function(x)  select(x, -contains("upper95"), -contains("lower95")))             # focus on median values
sums_median <- lapply(results_median, function(x) mutate(x, Sum = rowSums(x[4:length(x)], na.rm = TRUE)) %>%                    # sum the columns, except the ones describing the scenario
select(Group, Forest_use, Management, Sum))                                         # select only the interesting columns
results_CI <- lapply(results, function(x)  select(x, -contains("median")))                                        # focus on CI values
sums_CI <- lapply(results_CI, function(x) mutate(x, Sum_upper = rowSums(select(x, contains("upper95")), na.rm = TRUE)) %>%      # sum the columns for the upper CI, except the ones describing the scenario
mutate(Sum_lower = rowSums(select(x, contains("lower95")), na.rm = TRUE)) %>%
select(Group, Forest_use, Management, Sum_upper, Sum_lower))     # select only the interesting columns
rm(myfiles, results_in, for_management)
save(results, results_CI, results_median, sums, sums_CI, sums_median, tstep, file = paste0(rdata_path)) # this data can then be read by the scripts used to aggregate the land uses
if (energy_exports == "ex") { create.csv.EU.ex(rdata_path, csv_path, case_subcase) # EU_Rdata-to-csv.R
}else if(energy_exports == "EPnoex") { create.csv.EU.EPnoex(rdata_path, csv_path, case_subcase)
}else if(energy_exports == "noEPnoex") {create.csv.EU.noEPnoex(rdata_path, csv_path, case_subcase)}
if (energy_exports == "ex") { EUfootprint.barplot.EP(csv_path, case_subcase, plots_path, year) # EU_barplots.R
}else if(energy_exports == "EPnoex") { EUfootprint.barplot.EP(csv_path, case_subcase, plots_path, year)
}else if(energy_exports == "noEPnoex") { EUfootprint.barplot.noEP(csv_path, case_subcase, plots_path, year) }
if (energy_exports == "ex") { EUinternal.barplot.noEPex(csv_path, case_subcase, plots_path, year) # EU_barplots.R
}else if(energy_exports == "EPnoex") { EUinternal.barplot.EPnoex(csv_path, case_subcase, plots_path, year)
}else if(energy_exports == "noEPnoex") { EUinternal.barplot.noEPnoex(csv_path, case_subcase, plots_path, year)}
if (energy_exports == "ex") { EUinternal.barplot.noEPex(csv_path, case_subcase, plots_path, year) # EU_barplots.R
}else if(energy_exports == "EPnoex") { EUinternal.barplot.EPnoex(csv_path, case_subcase, plots_path, year)
}else if(energy_exports == "noEPnoex") { EUinternal.barplot.noEPnoex(csv_path, case_subcase, plots_path, year)}
