year = c(2100)
focus = "European internal forest"
climate = "REF-RCP"
Zoom = TRUE
group = c("RCP6.5-REF","RCP2.6")
scenario = c("Multifunctional", "Set-aside")
level = c("Baseline", "Free", "50%", "100%")
title = "Global loss of species - Impacts of EU internal forest management in 2100"
} else {stop("Define id")}
# Load the data ====
if(map == "PDF") {
legend = "PDF (%)"
data <- read.csv(paste0(results_path, "/", result_files, year[1], file_label, ".csv"))
if (length(year) > 1) {
data_temp <- read.csv(paste0(results_path, "/", result_files, year[2], file_label, ".csv"))
data <- data %>% full_join(data_temp)
}
}
if(map == "PDFha") {
legend = "PDF(%)/ha (logarithmic scale)"
data <- read.csv(paste0(csv_path, "PDF-ha.csv"), header = TRUE)
if(id == "Global") {data <- data %>% filter(Year == "2100" | Year == "2020")
}else if (id != "Global")  {data <- data %>% filter(Year == "2100")}
}
#====
# Rename elements ====
data <- data %>% separate( Scenario, into = c("Group", "Scenario", "Level"), sep = "_") %>%                                       # separate the column Scenario into three columns
mutate(Level = str_replace(Level,"noAF", "Baseline"), Level = str_replace(Level,"AF0", "Free"),  # rename the factors in the column with Level information
Level = str_replace(Level,"AF25", "25%"), Level = str_replace(Level,"AF50", "50%"),
Level = str_replace(Level,"AF75", "75%"), Level = str_replace(Level,"AF100", "100%"),
Group = str_replace(Group, "RCP", "RCP2.6"),  Group = str_replace(Group, "REF", "RCP6.5-REF"), Scenario = str_replace(Scenario,"MFM","Multifunctional"), Scenario = str_replace(Scenario, "SFM", "Set-aside")) #%>%                                                              # rename the rcp scenario
#unite("Scenario", Group:Level, sep = "_")                                                                   # re-merge the columns describing the scenario to keep it as it was initially
#====
# Filter the elements according to what we want to plot ====
data <- data %>% dplyr::filter(Group %in% group) %>%
dplyr::filter(Scenario %in% scenario) %>%
dplyr::filter(Level %in% level) %>%
mutate(Year = as.character(Year))
#====
# Sum the rows which should be aggregated ====
data <- data %>%
mutate_if(is.numeric, ~.*100) %>%
mutate(Global = rowSums(select(., contains("median"))),
EUFootprint = case_when((energy_exports == "ex" | energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & ((contains("EP") & contains("EU"))|(starts_with("For") & contains("EU"))|(contains("EP") & contains("im"))|(starts_with("For_") & contains("im")))), na.rm = TRUE),
# For_ClearCut_EU_median + For_ClearCut_im_median + For_Retention_EU_median + For_Plantation_im_median + For_TimberPlant_EU_median +
#   + For_SelectionSystem_EU_median + For_Selective_im_median + EP_EU_median + EP_conv_EU_median + EP_conv_im_median + ForOther_Extensive_EU_median +
#   + ForOther_Intensive_EU_median,
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For") & contains("EU"))|(starts_with("For_") & contains("im")))), na.rm = TRUE)),
EUForest = case_when((energy_exports == "ex")
~ rowSums(select(., contains("median")& ((starts_with("For_") & (contains("EU")|contains("ex"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & (((starts_with("For_") | starts_with("EP") ) & (contains("EU"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For_") & contains("EU")) | (contains("ForOther") & contains("EU")))), na.rm = TRUE))
) %>%
select(Group, Scenario, Level, Ecoregion, Year, contains(id)) %>%
dplyr::rename_at(vars(all_of(id)), ~ "Values") %>%
dplyr::rename(eco_code = Ecoregion)
if(id == "Global") {
data <- data %>% filter(Year == "2100" | (Year == "2020" & Group == "RCP6.5-REF")) %>% # for the year 2020, select only one climate scenario
rename(Management = Scenario) %>%
unite("Scenario", c(Year, Group), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "2020-RCP6.5-REF", "2020-RCP6.5-REF/RCP2.6"))
data$Scenario <- factor(data$Scenario, levels = c("2020-RCP6.5-REF/RCP2.6", "2100-RCP6.5-REF", "2100-RCP2.6"), labels = c("2020 - RCP6.5(REF) / RCP2.6", "2100 - RCP6.5 (REF)", "2100 - RCP2.6"))
}
if(id == "EUFootprint") {
if(graph == "B-F-50-100") {
data <- data %>% filter((Level == "50%" | Level == "100%" | Level == "Baseline" & Scenario == "Multifunctional") | (Level == "Free" & Scenario == "Multifunctional")) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Baseline", "Baseline")) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Free", "AFM-Free"))
data$Group = factor(data$Group, levels = c("RCP6.5-REF", "RCP2.6"), labels = c("RCP6.5 (REF)", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "AFM-Free", "Multifunctional-50%", "Multifunctional-100%", "Set-aside-50%", "Set-aside-100%"))
} else if(graph == "B-100")
data <- data %>% filter(Level == "100%" | Level == "Baseline" & Scenario == "Multifunctional") %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Baseline", "Baseline")) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Free", "AFM-Free"))
data$Group = factor(data$Group, levels = c("RCP6.5-REF", "RCP2.6"), labels = c("RCP6.5 (REF)", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Multifunctional-100%", "Set-aside-100%"))
}
if(id == "EUForest") {
data <- data %>% filter(Level == "50%" | Level == "100%" | (Level == "Baseline" & Scenario == "Multifunctional") | (Level == "Free" & Scenario == "Multifunctional")) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Baseline", "Baseline")) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Free", "AFM-Free"))
data$Group = factor(data$Group, levels = c("RCP6.5-REF", "RCP2.6"), labels = c("RCP6.5 (REF)", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "AFM-Free", "Multifunctional-50%", "Set-aside-50%", "Multifunctional-100%", "Set-aside-100%"))
}
if (ratio == TRUE) {
data_wide <- data.frame(data %>% pivot_wider(names_from = Scenario, values_from = Values)) %>%
transmute(Group = Group, eco_code = eco_code, Year = Year, AFM.Free = AFM.Free, Multifunctional.100. = Multifunctional.100., Multifunctional.50. = Multifunctional.50.,
Set.aside.100. = Set.aside.100., Set.aside.50. = Set.aside.50., Baseline = Baseline) %>%
mutate_if(is.numeric, ~./Baseline)
data_long <- data.frame(data_wide %>% pivot_longer(cols = AFM.Free:Baseline, names_to = "Scenario", values_to = "Values") %>%
arrange(Group, Year, Scenario, eco_code))
data_long <- data_long %>%  mutate(Scenario = str_replace(Scenario, "Baseline", "Baseline")) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional.50.", "Multifunctional-50%")) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional.100.", "Multifunctional-100%")) %>%
mutate(Scenario = str_replace(Scenario, "AFM.Free", "AFM-Free")) %>%
mutate(Scenario = str_replace(Scenario, "Set.aside.50.", "Set-aside-50%")) %>%
mutate(Scenario = str_replace(Scenario, "Set.aside.100.", "Set-aside-100%"))
data_long$Scenario = factor(data_long$Scenario, levels = c("Baseline", "AFM-Free", "Multifunctional-50%", "Multifunctional-100%", "Set-aside-50%", "Set-aside-100%"))
data_long[data_long$eco_code == "PA1205", "Values"] = NaN
data <- data_long
}
#data <- data %>% filter(Scenario == "Baseline" | Scenario == "Set-aside-100%")
data_backup <- data
#====
#write.csv(data, paste0("./plotting/no_cutoff/Global_PDF_REF-RCP_", id ,"_ecoregion.csv"), row.names = FALSE)
# if (region == "global") {
#
#   df <- df %>% filter(Values >= 0)
#
# }
df <- left_join(shp, data)
# Zoom ====
if (Zoom == TRUE) {
EU_map <- st_read(dsn = "./scripts/plotting/maps_shapefiles/Map_EU_dissolved", layer = "dissolved_EU")
}
#====
df <- df %>% filter(Scenario != "NA")
if(map == "PDFha") {
df <- df %>% mutate(Values = log10(Values))
df$Values[is.infinite(df$Values)] <- NA
}
#test = "RdYlBu"
#pal <- c("#fafafa", "#EAEDF6", "#D7DFEF", "#C5D1E9", "#B2C3E2", "#A0B5DC", "#8CA7D5", "#789ACF", "#638CC8", "#4B7FC3", "#3872B6", "#3165A2", "#2B598E", "#244D7B", "#1E4069")
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
# this is the palette to use:
pal <- c("#fafafa", "#f0f9e8", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081", "#1E4069", "#011959")
# #f3f7f0
ptm <- proc.time()
if (length(year) > 1) {
#pdf(file = paste0("./plotting/no_cutoff/", map, "_", climate, "_", region, "_", test,"lr.pdf"), width = 8, height = 15)
png(file = paste0(plots_path, map, "_", climate, "_", region, file_label, "_", energy_exports , ".png"), width = 14, height = 24, res = 600, units = "in")
} else{
#pdf(file = paste0("./plotting/no_cutoff/", map, "-", id,"_", climate, "_", year[1], "_", region, "_", test,"lr.pdf"), width = 8, height = 4)
png(file = paste0(plots_path, map, "-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, ".png"),  width = 40, height = 20, res = 600, units = "in")
}
print(id)
# max for EUForest: 0.006180501
# max for EUFootprint: 0.007033453
if(id == "EUFootprint")  {# & file_label != "_cutoff_mammals") {
li <- c(0, 0.0072)# max(data$Values))
br <- c(0, 0.002, 0.004, 0.006, 0.008, 0.010, 0.012)
}
if(id == "EUForest") { # & file_label != "_cutoff_mammals") {
li <- c(0, 0.008)
br <- c(0, 0.002, 0.004, 0.006)
}
### Additional options to plot the multiple maps with the same legend
# if(file_label == "_cutoff_mammals") {
#   li <- c(0, max(df$Values))
#   br <- round(seq(0, max(df$Values), length = 6), digits = 4)
# }
#
# if(id = "EUForest" & (file_label == "_cutoff" | file_label == "_Chaudhary2015" |
#    file_label == "_Chaudhary2018" | file_label == "_LCImpact")) {
#   li <- c(0, 0.014)
#   br <- c(0, 0.002, 0.004, 0.006, 0.008, 0.010, 0.012, 0.014)
# }
#
# if(id = "EUFootprint" & (file_label == "_cutoff" | file_label == "_Chaudhary2015" |
#      file_label == "_Chaudhary2018" | file_label == "_LCImpact")) {
#     li <- c(0, 0.015)
#     br <- c(0, 0.005, 0.010, 0.015)
# }
#
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = "gray45", lwd = 0.2) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
scale_fill_gradientn(colors = pal, na.value = "white") + #, limits = li, breaks = br) + ################################ this is the line to keep
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 23),
axis.text = element_blank(),
legend.title = element_text(size = 27),
legend.text = element_text(size = 23),
legend.key.size = unit(2, "cm"), legend.key.width = unit(1,"cm"),
legend.position = "right") +
theme(strip.background = element_rect(color = NULL, fill = "white", size = 1.5, linetype = "solid"),
strip.text = element_text(size = 23)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
# if( region == "global") {figure <- figure + facet_wrap(~ Group + Scenario, nrow = 4) + coord_sf(ylim=c(-60, 90)) }
if(id == "EUFootprint") {figure <- figure + facet_grid(vars(Scenario), vars(Group)) + coord_sf(ylim=c(-60, 90)) }
if(id == "Global") {figure <- figure + facet_wrap( ~ Scenario, ncol = 1) }
#if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
if (id == "EUForest") {
figure <- figure + geom_sf(data = EU_map, fill = "transparent", colour = "black")
figure <- figure + facet_grid(Group ~ Scenario)
figure <- figure + coord_sf(xlim = c(-15, 40), ylim = c(30, 75))
}
figure
dev.off()
id = "EUFootprint"  # options: only "EUFootprint"
source("./scripts/plotting/map_PDF-Mm3.R")
shp_original <- st_read(dsn = "./scripts/plotting/maps_shapefiles/Mapping_GLOBIOM", layer = "GLOBIOM_Regions")
shp <- shp_original %>%
mutate(GLO_reg = str_replace(GLO_reg, "Pacific_Islands", "Pacific_Island"))
#shp <- shp %>% filter(Shape_Area > 0.1)
#test = "PuRd"
#test = "Purple-Yellow"
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
id = "EUFootprint"
print(id)
region = "global"
year = c(2100)
map = "PDF" #options: "PDF"
focus = "European forest biomass"
climate = "RCP"
Zoom = F
group = c("RCP6.5-REF", "RCP2.6")
scenario = c("Multifunctional", "Set-aside")
level = c("Baseline", "Free", "50%", "100%")
title = "Global loss of species - Impacts per unit of volume of EU forest biomass demand in 2100 (RCP2.6)"
# Load the data ====
legend = "PDF/Mm3 (logarithmic scale)"
data <- read.csv(paste0(csv_path, "PDF_Mm3_globiomregions" , file_label, ".csv"))
data <- data %>% mutate(Year = as.character(Year))
data <- data %>% filter(Year == year)
Globiom_regions <- unique(sort(data$Region))
#====
# Rename elements ====
data <- data %>% separate(Scenario, into = c("Group", "Scenario", "Level"), sep = "_") %>%                                       # separate the column Scenario into three columns
mutate(Level = str_replace(Level,"noAF", "Baseline"), Level = str_replace(Level,"AF0", "Free"),  # rename the factors in the column with Level information
Level = str_replace(Level,"AF25", "25%"), Level = str_replace(Level,"AF50", "50%"),
Level = str_replace(Level,"AF75", "75%"), Level = str_replace(Level,"AF100", "100%"),
Group = str_replace(Group, "RCP", "RCP2.6"),  Group = str_replace(Group, "REF", "RCP6.5-REF"), Scenario = str_replace(Scenario,"MFM","Multifunctional"), Scenario = str_replace(Scenario, "SFM", "Set-aside")) #%>%                                                              # rename the rcp scenario
#unite("Scenario", Group:Level, sep = "_")                                                                   # re-merge the columns describing the scenario to keep it as it was initially
#====
# Filter the elements according to what we want to plot ====
data <- data %>% dplyr::filter(Group %in% group) %>%
dplyr::filter(Scenario %in% scenario) %>%
dplyr::filter(Level %in% level) %>%
mutate(Year = as.character(Year))
#====
# Sum the rows which should be aggregated ====
data <- data %>%
mutate_if(is.numeric, ~.*100) %>%
mutate(EUFootprint = tot_noexport) %>%
select(Group, Scenario, Level, Region, Year, contains(id)) %>%
dplyr::rename_at(vars(all_of(id)), ~ "Values") %>%
rename(GLO_reg = Region)
if(id == "EUFootprint") {
data <- data %>% filter((Level == "50%" | Level == "100%" | Level == "Baseline" & Scenario == "Multifunctional") | (Level == "Free" & Scenario == "Multifunctional")) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Baseline", "Baseline")) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Free", "AFM-Free"))
data$Group = factor(data$Group, levels = c("RCP6.5-REF", "RCP2.6"), labels = c("RCP6.5 (REF)", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "AFM-Free", "Multifunctional-50%", "Set-aside-50%", "Multifunctional-100%", "Set-aside-100%"))
}
#====
df <- left_join(shp, data)
df <- df %>% filter(Scenario != "NA")
df$Values <- log10(df$Values)
df$Values[is.infinite(df$Values)] <- NA
#test = "RdYlBu"
#pal <- c("#fafafa", "#EAEDF6", "#D7DFEF", "#C5D1E9", "#B2C3E2", "#A0B5DC", "#8CA7D5", "#789ACF", "#638CC8", "#4B7FC3", "#3872B6", "#3165A2", "#2B598E", "#244D7B", "#1E4069")
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
# this is the palette to use:
pal <- c("#fafafa", "#f0f9e8", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081", "#1E4069", "#011959")
ptm <- proc.time()
if (length(year) > 1) {
#pdf(file = paste0("./plotting/no_cutoff/", map, "_", climate, "_", region, "_", test,"lr.pdf"), width = 8, height = 15)
png(file = paste0(plots_path, map, "Mm3_", climate, "_", region, file_label, "_", energy_exports , ".png"), width = 6, height = 6, res = 600, units = "in")
} else{
#pdf(file = paste0("./plotting/no_cutoff/", map, "-", id,"_", climate, "_", year[1], "_", region, "_", test,"lr.pdf"), width = 8, height = 4)
png(file = paste0(plots_path, map, "Mm3-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, ".png"),  width = 20, height = 27, res = 600, units = "in")
}
li <- c(-7, -1.5)
la <- c("-7","-6", "-5", "-4", "-3", "-2")
br <- c(-7, -6, -5, -4, -3, -2)
print(id)
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = "darkgrey", lwd = 0.2) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
scale_fill_gradientn(colors = pal, na.value = "gray98") + #, limits = li, breaks = br, labels = la) + ################################ this is the line to keep
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 27)) +
theme(strip.background = element_rect(color=NULL, fill="white", size=1.5, linetype="solid"),
strip.text = element_text(size = 27)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
if( region == "global") {figure <- figure + facet_grid(Scenario ~ Group)}
#if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
figure
dev.off()
if (length(year) > 1) {
#pdf(file = paste0("./plotting/no_cutoff/", map, "_", climate, "_", region, "_", test,"lr.pdf"), width = 8, height = 15)
png(file = paste0(plots_path, map, "Mm3_", climate, "_", region, file_label, "_", energy_exports , ".png"), width = 6, height = 6, res = 600, units = "in")
} else{
#pdf(file = paste0("./plotting/no_cutoff/", map, "-", id,"_", climate, "_", year[1], "_", region, "_", test,"lr.pdf"), width = 8, height = 4)
png(file = paste0(plots_path, map, "Mm3-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, ".png"),  width = 20, height = 27, res = 600, units = "in")
}
li <- c(-7, -1.5)
la <- c("-7","-6", "-5", "-4", "-3", "-2")
br <- c(-7, -6, -5, -4, -3, -2)
print(id)
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = "darkgrey", lwd = 0.2) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
scale_fill_gradientn(colors = pal, na.value = "gray98", limits = li, breaks = br, labels = la) + ################################ this is the line to keep
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 27)) +
theme(strip.background = element_rect(color=NULL, fill="white", size=1.5, linetype="solid"),
strip.text = element_text(size = 27)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
if( region == "global") {figure <- figure + facet_grid(Scenario ~ Group)}
#if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
figure
dev.off()
if (length(year) > 1) {
#pdf(file = paste0("./plotting/no_cutoff/", map, "_", climate, "_", region, "_", test,"lr.pdf"), width = 8, height = 15)
png(file = paste0(plots_path, map, "Mm3_", climate, "_", region, file_label, "_", energy_exports , ".png"), width = 6, height = 6, res = 600, units = "in")
} else{
#pdf(file = paste0("./plotting/no_cutoff/", map, "-", id,"_", climate, "_", year[1], "_", region, "_", test,"lr.pdf"), width = 8, height = 4)
png(file = paste0(plots_path, map, "Mm3-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, ".png"),  width = 20, height = 27, res = 600, units = "in")
}
li <- c(-7, -1.5)
la <- c("-7","-6", "-5", "-4", "-3", "-2")
br <- c(-7, -6, -5, -4, -3, -2)
print(id)
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = "darkgrey", lwd = 0.2) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
scale_fill_gradientn(colors = pal, na.value = "gray98") #, limits = li, breaks = br, labels = la) + ################################ this is the line to keep
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 27)) +
theme(strip.background = element_rect(color=NULL, fill="white", size=1.5, linetype="solid"),
strip.text = element_text(size = 27)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
if( region == "global") {figure <- figure + facet_grid(Scenario ~ Group)}
#if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
figure
dev.off()
if (length(year) > 1) {
#pdf(file = paste0("./plotting/no_cutoff/", map, "_", climate, "_", region, "_", test,"lr.pdf"), width = 8, height = 15)
png(file = paste0(plots_path, map, "Mm3_", climate, "_", region, file_label, "_", energy_exports , ".png"), width = 6, height = 6, res = 600, units = "in")
} else{
#pdf(file = paste0("./plotting/no_cutoff/", map, "-", id,"_", climate, "_", year[1], "_", region, "_", test,"lr.pdf"), width = 8, height = 4)
png(file = paste0(plots_path, map, "Mm3-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, ".png"),  width = 20, height = 27, res = 600, units = "in")
}
li <- c(-7, -1.5)
la <- c("-7","-6", "-5", "-4", "-3", "-2")
br <- c(-7, -6, -5, -4, -3, -2)
print(id)
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = "darkgrey", lwd = 0.2) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
scale_fill_gradientn(colors = pal, na.value = "gray98") +  #, limits = li, breaks = br, labels = la) + ################################ this is the line to keep
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 27)) +
theme(strip.background = element_rect(color=NULL, fill="white", size=1.5, linetype="solid"),
strip.text = element_text(size = 27)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
if( region == "global") {figure <- figure + facet_grid(Scenario ~ Group)}
#if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
figure
dev.off()
source("./scripts/plotting/map_areas.R")
source("./scripts/data_preparation/areas_functions.R")
shp_original <- st_read(dsn = "./scripts/plotting/maps_shapefiles/WWF_Ecoregions", layer = "wwf_terr_ecos")
shp <- shp_original
shp <- shp %>% filter(Shape_Area > 0.1)
Zoom = F
region = "global"
year = c(2020,2100)
map = "Areas"
climate = "REF-RCP"
# Parameters ====
group = c("RCP6.5 (REF)","RCP2.6")
scenario = c("Multifunctional")
level = c("Baseline")
# Load the data ====
title = paste0("Projections of future land use shares in each ecoregion")
legend = "Area %"
data <- read.csv(paste0(areas_path, "areas_processed/NotRel-Wet/mg/areas_disaggr_mg_", year[1], "_notRel-Wet.csv"))
data$Year = year[1]
if (length(year) > 1) {
data_temp <- read.csv(paste0(areas_path, "areas_processed/NotRel-Wet/mg/areas_disaggr_mg_", year[2], "_notRel-Wet.csv"))
data_temp$Year = year[2]
data <- data %>% full_join(data_temp)
}
# Rename elements ====
data <- data %>% separate( Scenario, into = c("Group", "Scenario", "Level"), sep = "_") %>%                                       # separate the column Scenario into three columns
mutate(Level = str_replace(Level,"noAF", "Baseline"), Level = str_replace(Level,"AF0", "Free"),  # rename the factors in the column with Level information
Level = str_replace(Level,"AF25", "25%"), Level = str_replace(Level,"AF50", "50%"),
Level = str_replace(Level,"AF75", "75%"), Level = str_replace(Level,"AF100", "100%"),
Group = str_replace(Group, "RCP", "RCP2.6"), Group = str_replace(Group, "REF", "RCP6.5 (REF)"), Scenario = str_replace(Scenario,"MFM","Multifunctional"), Scenario = str_replace(Scenario, "SFM", "Set-aside")) #%>%                                                              # rename the rcp scenario
# Filter the elements according to what we want to plot ====
data <- data %>% dplyr::filter(Group %in% group) %>%
dplyr::filter(Scenario %in% scenario) %>%
dplyr::filter(Level %in% level) %>%
mutate(Year = as.character(Year))
# Sum the rows which should be aggregated ====
data <- data %>%
# calculate the share of each land use type
mutate(Annual = rowSums(select(., contains("Annual")))/A_org*100, Pasture = rowSums(select(., contains("Pasture")))/A_org*100,
Forest = rowSums(select(., contains("For")))/A_org*100, EP = rowSums(select(., contains("EP")))/A_org*100) %>% #/A_org*100) %>%
dplyr::select(Group, Scenario, Level, Ecoregion, Year, Annual, Pasture, Forest, EP) %>%
pivot_longer(cols= Annual:EP, names_to = "Category", values_to = "Values") %>%
dplyr::rename(eco_code = Ecoregion) %>%
filter(Year == "2100" | (Year == "2020" & Group == "RCP6.5 (REF)")) # for the year 2020, select only one climate scenario
data$Group[data$Year == "2020"] = "RCP6.5 (REF)/RCP2.6"
data$Category <- factor(data$Category, levels = unique(data$Category))
data$Group <- factor(data$Group, levels = c("RCP6.5 (REF)/RCP2.6", "RCP6.5 (REF)", "RCP2.6"))
#====
#write.csv(data, paste0("./plotting/no_cutoff/Global_Areas_REF-RCP_areas.csv"), row.names = FALSE)
df <- left_join(shp, data)
df <- df %>% filter(Scenario != "NA")
# Zoom ====
if (Zoom == TRUE) {
Globiom_eco_org <- read.csv(areas_base_path, "GLOBIOM_Ecoregion.csv", header = TRUE)
# rearrange data in Globiom_eco
Globiom_eco_org <- filter(Globiom_eco_org, Ecoregion!="Lake", Ecoregion != "Rock and Ice") %>%
dplyr::rename(eco_code = Ecoregion)
Globiom_eco_org = droplevels(Globiom_eco_org, "Lake", "Rock and Ice")  #erase these two names from the list of factors
df <- join_regions(df, Globiom_eco_org) %>%
filter(Globiom_Reg == region)
}
# ====
df <- df %>% mutate(Category = str_replace(Category, "Annual", "Annual crops"), Category = str_replace(Category, "Pasture", "Pastures"),
Category = str_replace(Category, "Forest", "Managed forests"), Category = str_replace(Category, "EP", "Energy crops and plantations"))
df$Category <- factor(df$Category, levels = c("Annual crops", "Pastures", "Managed forests", "Energy crops and plantations"))
test = "Oslo_mod1"
pal <- c("#f0f9e8", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081", "#1E4069", "#011959")
ptm <- proc.time()
if (length(year) > 1) {
#pdf(file = paste0("./NotRel-Wet/", map, "_", climate, "_", region, "_", test, "_1.pdf"), width = 9, height = 4.5)
png(file = paste0(aggr_plot_path_areas, map, "_", climate, "_", region, "_NotRelWet.png"), width = 9, height = 4.5, res = 1000, units = "in")
} else{
#pdf(file = paste0("./NotRel-Wet/", map, "_", climate, "_", year[1], "_", region,"_", test, ".pdf"), width = 14, height = 14)
png(file = paste0(aggr_plot_path_areas, map, "-", id,"_", climate, "_", year[1], "_", region, "_NotRelWet.png"), width = 14, height = 14, res = 1000, units = "in")
}
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = NA) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis() +
#scale_fill_continuous_sequential(test, na.value = "white") +
#scale_fill_distiller(palette = test, guide = "colourbar", direction = 1, na.value = "white") +
# scale_fill_scico(palette = "batlow") +
scale_fill_gradientn(colors = pal, na.value = "white") +
labs(fill = "", x = "", y = "") + #, title = title) +
labs(fill = legend) +
#theme(plot.title = element_text(size = 12, face = "bold.italic")) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = "transparent"),
plot.title = element_text(hjust = 0.5))
if(length(year) == 1) {figure <- figure + facet_wrap(vars(Group)) }
if(length(year) > 1) {
figure <- figure + facet_grid(Category ~ Year + Group, labeller = label_wrap_gen(width = 20)) +
theme(strip.text = element_text(size = 8)) #
}
if (region != "global") {figure <- figure + coord_sf(xlim=c(-15, 45), ylim=c(30, 75)) }
figure
dev.off()
