rdata_path <- paste0(mainfolder, subfolder, file_rdata)
rdata_path_areas <- paste0(mainfolder, "areas/", case_areas, "/", file_rdata_areas)
csv_path <- paste0(mainfolder, subfolder,"csv/")      # path used to save csv (generated using the .Rdata)
csv_path_areas <-  paste0(mainfolder, "areas/", case_areas, "/")     # path used to save csv with data on areas (generated using the .Rdata)
case_subcase
id
shp_original <- st_read(dsn = "./aggregation_plotting/WWF_Ecoregions", layer = "wwf_terr_ecos")
shp <- shp_original
shp <- shp %>% filter(Shape_Area > 0.1)
#test = "PuRd"
#test = "Purple-Yellow"
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
#id = "EUFootprint"
if(id == "Global"){
region = "global"
year = c(2020, 2100)
focus = "global land use"
climate = "REF-RCP"
Zoom = F
group = c("RCP6.5-REF", "RCP2.6")
scenario = c("Multifunctional")
level = "Baseline"
title = "Global loss of species - Impacts of global land use in 2020 and 2100"
} else if (id == "EUFootprint") {
print(id)
region = "global"
year = c(2100)
focus = "European forest biomass"
climate = "RCP"
Zoom = F
group = c("RCP2.6")
scenario = c("Multifunctional", "Set-aside")
level = c("Free", "100%")
title = "Global loss of species - Impacts of EU forest biomass demand in 2100 (RCP2.6)"
} else if (id == "EUForest"){
region = "Europe"
year = c(2100)
focus = "European internal forest"
climate = "REF-RCP"
Zoom = F
group = c("RCP6.5-REF","RCP2.6")
scenario = c("Multifunctional", "Set-aside")
level = c("Baseline","25%", "100%")
title = "Global loss of species - Impacts of EU internal forest management in 2100"
} else {stop("Define id")}
# Load the data ====
if(map == "PDF") {
legend = "PDF (%)"
data <- read.csv(paste0(folder_slost, file_slost, year[1], case_subcase, ".csv"))
if (length(year) > 1) {
data_temp <- read.csv(paste0(folder_slost, file_slost, year[2], case_subcase, ".csv"))
data <- data %>% full_join(data_temp)
}
}
if(map == "PDFha") {
legend = "PDF(%)/ha (logarithmic scale)"
data <- read.csv(paste0(csv_path, "PDF-ha.csv"), header = TRUE)
if(id == "Global") {data <- data %>% filter(Year == "2100" | Year == "2020")
}else if (id != "Global")  {data <- data %>% filter(Year == "2100")}
}
#====
# Rename elements ====
data <- data %>% separate( Scenario, into = c("Group", "Scenario", "Level"), sep = "_") %>%                                       # separate the column Scenario into three columns
mutate(Level = str_replace(Level,"noAF", "Baseline"), Level = str_replace(Level,"AF0", "Free"),  # rename the factors in the column with Level information
Level = str_replace(Level,"AF25", "25%"), Level = str_replace(Level,"AF50", "50%"),
Level = str_replace(Level,"AF75", "75%"), Level = str_replace(Level,"AF100", "100%"),
Group = str_replace(Group, "RCP", "RCP2.6"),  Group = str_replace(Group, "REF", "RCP6.5-REF"), Scenario = str_replace(Scenario,"MFM","Multifunctional"), Scenario = str_replace(Scenario, "SFM", "Set-aside")) #%>%                                                              # rename the rcp scenario
#unite("Scenario", Group:Level, sep = "_")                                                                   # re-merge the columns describing the scenario to keep it as it was initially
#====
# Filter the elements according to what we want to plot ====
data <- data %>% dplyr::filter(Group %in% group) %>%
dplyr::filter(Scenario %in% scenario) %>%
dplyr::filter(Level %in% level) %>%
mutate(Year = as.character(Year))
#====
# Sum the rows which should be aggregated ====
data <- data %>%
mutate_if(is.numeric, ~.*100) %>%
mutate(Global = rowSums(select(., contains("median"))),
EUFootprint = case_when((energy_exports == "ex" | energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & ((contains("EP") & contains("EU"))|(starts_with("For") & contains("EU"))|(contains("EP") & contains("im"))|(starts_with("For_") & contains("im")))), na.rm = TRUE),
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For") & contains("EU"))|(starts_with("For_") & contains("im")))), na.rm = TRUE)),
EUForest = case_when((energy_exports == "ex")
~ rowSums(select(., contains("median")& ((starts_with("For_") & (contains("EU")|contains("ex"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & (((starts_with("For_") | starts_with("EP") ) & (contains("EU"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For_") & contains("EU")) | (contains("ForOther") & contains("EU")))), na.rm = TRUE))
) %>%
select(Group, Scenario, Level, Ecoregion, Year, contains(id)) %>%
dplyr::rename_at(vars(all_of(id)), ~ "Values") %>%
dplyr::rename(eco_code = Ecoregion)
if(id == "Global") {
data <- data %>% filter(Year == "2100" | (Year == "2020" & Group == "RCP6.5-REF")) %>% # for the year 2020, select only one climate scenario
rename(Management = Scenario) %>%
unite("Scenario", c(Year, Group), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "2020-RCP6.5-REF", "2020-RCP6.5-REF/RCP2.6"))
data$Scenario <- factor(data$Scenario, levels = c("2020-RCP6.5-REF/RCP2.6", "2100-RCP6.5-REF", "2100-RCP2.6"), labels = c("2020 - RCP6.5(REF) / RCP2.6", "2100 - RCP6.5 (REF)", "2100 - RCP2.6"))
}
if(id == "EUFootprint") {
data <- data %>% filter(Level == "100%" | (Level == "Free" & Scenario == "Multifunctional")) %>%
select(-Group) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Free", "AFM-Free"))
data$Scenario = factor(data$Scenario, levels = c("AFM-Free", "Multifunctional-100%", "Set-aside-100%"))
}
if(id == "EUForest") {
data <- data %>% filter(Scenario == "Set-aside" | (Scenario == "Multifunctional" & Level == "100%")) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Set-aside-Baseline", "Baseline"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Multifunctional-100%", "Set-aside-25%", "Set-aside-100%"))
data$Group = factor(data$Group, levels = c("RCP6.5-REF", "RCP2.6"), labels = c("RCP6.5 (REF)", "RCP2.6"))
}
#====
#write.csv(data, paste0("./plotting/no_cutoff/Global_PDF_REF-RCP_", id ,"_ecoregion.csv"), row.names = FALSE)
df <- left_join(shp, data)
# if (region == "global") {
#
#   df <- df %>% filter(Values >= 0)
#
# }
# Zoom ====
if (Zoom == TRUE) {
Globiom_eco_org <- read.csv("./grouped_land_use_files/GLOBIOM_Ecoregion.csv", header = TRUE)
# rearrange data in Globiom_eco
Globiom_eco_org <- filter(Globiom_eco_org, Ecoregion!="Lake", Ecoregion != "Rock and Ice") %>%
dplyr::rename(eco_code = Ecoregion)
Globiom_eco_org = droplevels(Globiom_eco_org, "Lake", "Rock and Ice")  #erase these two names from the list of factors
df <- join_regions(df, Globiom_eco_org) %>%
filter(Globiom_Reg == region)
}
#====
df <- df %>% filter(Scenario != "NA")
if(map == "PDFha") {
df <- df %>% mutate(Values = log10(Values))
df$Values[is.infinite(df$Values)] <- NA
}
#test = "RdYlBu"
#pal <- c("#fafafa", "#EAEDF6", "#D7DFEF", "#C5D1E9", "#B2C3E2", "#A0B5DC", "#8CA7D5", "#789ACF", "#638CC8", "#4B7FC3", "#3872B6", "#3165A2", "#2B598E", "#244D7B", "#1E4069")
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
# this is the palette to use:
pal <- c("#fafafa", "#f0f9e8", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081", "#1E4069", "#011959")
# #f3f7f0
ptm <- proc.time()
if (length(year) > 1) {
#pdf(file = paste0("./plotting/no_cutoff/", map, "_", climate, "_", region, "_", test,"lr.pdf"), width = 8, height = 15)
png(file = paste0(plots_path, map, "_", climate, "_", region, case_subcase, "_", energy_exports , ".png"), width = 6, height = 6, res = 600, units = "in")
} else{
#pdf(file = paste0("./plotting/no_cutoff/", map, "-", id,"_", climate, "_", year[1], "_", region, "_", test,"lr.pdf"), width = 8, height = 4)
png(file = paste0(plots_path, map, "-", id,"_", climate, "_", year[1], "_", region, case_subcase, "_",energy_exports, "_newleg.png"),  width = 6, height = 6, res = 600, units = "in")
}
print(id)
if(id == "EUFootprint" & case_subcase != "_cutoff_mammals") {
li <- c(0, 0.0125)
br <- c(0, 0.003, 0.006, 0.009, 0.012)
}
if(id == "EUForest" & case_subcase != "_cutoff_mammals") {
li <- c(0, 0.008)
br <- c(0, 0.002, 0.004, 0.006, 0.008)
}
if(id = case_subcase == "_cutoff_mammals" | case_subcase == "_Chaudhary2015" |
case_subcase == "_Chaudhary2018" | case_subcase == "_LCImpact") {
li <- c(0, max(df$Values))
br <- round(seq(0, max(df$Values), length = 6), digits = 4)
}
if(id = "EUForest" & (case_subcase == "_cutoff" | case_subcase == "_Chaudhary2015" |
case_subcase == "_Chaudhary2018" | case_subcase == "_LCImpact")) {
li <- c(0, 0.014)
br <- c(0, 0.002, 0.004, 0.006, 0.008, 0.010, 0.012, 0.014)
}
if(id = "EUFootprint" & (case_subcase == "_cutoff" | case_subcase == "_Chaudhary2015" |
case_subcase == "_Chaudhary2018" | case_subcase == "_LCImpact")) {
li <- c(0, 0.015)
br <- c(0, 0.005, 0.010, 0.015)
}
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = NA) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
scale_fill_gradientn(colors = pal, na.value = "white", limits = li, breaks = br) + ################################ this is the line to keep
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 7)) +
theme(strip.background = element_rect(color = NULL, fill = "white", size = 1.5, linetype = "solid"),
strip.text = element_text(size = 8)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
if( region == "global") {figure <- figure + facet_wrap( ~ Scenario, ncol = 1) }
if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
if (region != "global") {
figure <- figure + facet_grid(Group ~ Scenario)
figure <- figure + coord_sf(xlim=c(-15, 45), ylim=c(30, 75))
}
figure
dev.off()
type_of_data <- "impacts"       # "impacts" or "areas"
case <- "cutoff"              # cutoff, nocutoff, cutoff_timber, nocutoff_timber, LCImpact, Chaudhary2015 or Chaudhary2018
subcase <- ""                   # e.g. plants, mammals or birds (end of the csv files)
case_areas <- "notimber"        # "notimber" or "timber"
energy_exports <- "EPnoex"    # "ex" (Footprint includes energy plantations, Internal EU does not include energy crops but includes exports)
# "EPnoex" (Footprint includes energy plantations and Internal EU includes energy crop and exports)
# "noEPnoex" (Footprint does not include energy plantations, Internal EU does not include nor energy crop nor exports)
if(subcase == "") {
case_subcase <- paste0("_", case)
} else {case_subcase <- paste0("_", case, "_", subcase)}
CI <- FALSE # TRUE or FALSE
year = "2100"
############################ RESULTS DIRECTLY FROM THE MODEL ##############################
# access the results obtained directly from the model
folder_slost = paste0("./results/slost/species-lost_", case, "/")
file_slost = "Slost_mg_"     # in the call of the file the year and the subcase are added
folder_areas = paste0("./results/areas/", case_areas , "/mg/disaggregated/")
############################ ACCESS THE FOLDER WHERE RESULTS ARE AGGREGATED AND PLOTTED ##############################
# calculation -> PLOTTING -> RESULTS -> SUBFOLDER, whose name marks may refer to different types of results (with cutoff, without cutoff, with timber, without timber, etc)
# -> CSV or PLOTS or .Rdata files
mainfolder <- "./aggregation_plotting/results_plots-csv/"
subfolder <- paste0(case, "/")  # subfolder from where the files must be loaded or to where the files must be saved
plots_path <- paste0(mainfolder, subfolder,"plots/")  # path used to save the plots (generated using the .csv data)
file_rdata <- paste0("sums", case_subcase, ".Rdata")
file_rdata_areas <- paste0("areas_", case_areas, ".Rdata")
rdata_path <- paste0(mainfolder, subfolder, file_rdata)
rdata_path_areas <- paste0(mainfolder, "areas/", case_areas, "/", file_rdata_areas)
csv_path <- paste0(mainfolder, subfolder,"csv/")      # path used to save csv (generated using the .Rdata)
csv_path_areas <-  paste0(mainfolder, "areas/", case_areas, "/")     # path used to save csv with data on areas (generated using the .Rdata)
shp_original <- st_read(dsn = "./aggregation_plotting/WWF_Ecoregions", layer = "wwf_terr_ecos")
shp <- shp_original
shp <- shp %>% filter(Shape_Area > 0.1)
#test = "PuRd"
#test = "Purple-Yellow"
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
#id = "EUFootprint"
if(id == "Global"){
region = "global"
year = c(2020, 2100)
focus = "global land use"
climate = "REF-RCP"
Zoom = F
group = c("RCP6.5-REF", "RCP2.6")
scenario = c("Multifunctional")
level = "Baseline"
title = "Global loss of species - Impacts of global land use in 2020 and 2100"
} else if (id == "EUFootprint") {
print(id)
region = "global"
year = c(2100)
focus = "European forest biomass"
climate = "RCP"
Zoom = F
group = c("RCP2.6")
scenario = c("Multifunctional", "Set-aside")
level = c("Free", "100%")
title = "Global loss of species - Impacts of EU forest biomass demand in 2100 (RCP2.6)"
} else if (id == "EUForest"){
region = "Europe"
year = c(2100)
focus = "European internal forest"
climate = "REF-RCP"
Zoom = F
group = c("RCP6.5-REF","RCP2.6")
scenario = c("Multifunctional", "Set-aside")
level = c("Baseline","25%", "100%")
title = "Global loss of species - Impacts of EU internal forest management in 2100"
} else {stop("Define id")}
# Load the data ====
if(map == "PDF") {
legend = "PDF (%)"
data <- read.csv(paste0(folder_slost, file_slost, year[1], case_subcase, ".csv"))
if (length(year) > 1) {
data_temp <- read.csv(paste0(folder_slost, file_slost, year[2], case_subcase, ".csv"))
data <- data %>% full_join(data_temp)
}
}
if(map == "PDFha") {
legend = "PDF(%)/ha (logarithmic scale)"
data <- read.csv(paste0(csv_path, "PDF-ha.csv"), header = TRUE)
if(id == "Global") {data <- data %>% filter(Year == "2100" | Year == "2020")
}else if (id != "Global")  {data <- data %>% filter(Year == "2100")}
}
#====
# Rename elements ====
data <- data %>% separate( Scenario, into = c("Group", "Scenario", "Level"), sep = "_") %>%                                       # separate the column Scenario into three columns
mutate(Level = str_replace(Level,"noAF", "Baseline"), Level = str_replace(Level,"AF0", "Free"),  # rename the factors in the column with Level information
Level = str_replace(Level,"AF25", "25%"), Level = str_replace(Level,"AF50", "50%"),
Level = str_replace(Level,"AF75", "75%"), Level = str_replace(Level,"AF100", "100%"),
Group = str_replace(Group, "RCP", "RCP2.6"),  Group = str_replace(Group, "REF", "RCP6.5-REF"), Scenario = str_replace(Scenario,"MFM","Multifunctional"), Scenario = str_replace(Scenario, "SFM", "Set-aside")) #%>%                                                              # rename the rcp scenario
#unite("Scenario", Group:Level, sep = "_")                                                                   # re-merge the columns describing the scenario to keep it as it was initially
#====
# Filter the elements according to what we want to plot ====
data <- data %>% dplyr::filter(Group %in% group) %>%
dplyr::filter(Scenario %in% scenario) %>%
dplyr::filter(Level %in% level) %>%
mutate(Year = as.character(Year))
#====
# Sum the rows which should be aggregated ====
data <- data %>%
mutate_if(is.numeric, ~.*100) %>%
mutate(Global = rowSums(select(., contains("median"))),
EUFootprint = case_when((energy_exports == "ex" | energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & ((contains("EP") & contains("EU"))|(starts_with("For") & contains("EU"))|(contains("EP") & contains("im"))|(starts_with("For_") & contains("im")))), na.rm = TRUE),
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For") & contains("EU"))|(starts_with("For_") & contains("im")))), na.rm = TRUE)),
EUForest = case_when((energy_exports == "ex")
~ rowSums(select(., contains("median")& ((starts_with("For_") & (contains("EU")|contains("ex"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & (((starts_with("For_") | starts_with("EP") ) & (contains("EU"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For_") & contains("EU")) | (contains("ForOther") & contains("EU")))), na.rm = TRUE))
) %>%
select(Group, Scenario, Level, Ecoregion, Year, contains(id)) %>%
dplyr::rename_at(vars(all_of(id)), ~ "Values") %>%
dplyr::rename(eco_code = Ecoregion)
if(id == "Global") {
data <- data %>% filter(Year == "2100" | (Year == "2020" & Group == "RCP6.5-REF")) %>% # for the year 2020, select only one climate scenario
rename(Management = Scenario) %>%
unite("Scenario", c(Year, Group), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "2020-RCP6.5-REF", "2020-RCP6.5-REF/RCP2.6"))
data$Scenario <- factor(data$Scenario, levels = c("2020-RCP6.5-REF/RCP2.6", "2100-RCP6.5-REF", "2100-RCP2.6"), labels = c("2020 - RCP6.5(REF) / RCP2.6", "2100 - RCP6.5 (REF)", "2100 - RCP2.6"))
}
if(id == "EUFootprint") {
data <- data %>% filter(Level == "100%" | (Level == "Free" & Scenario == "Multifunctional")) %>%
select(-Group) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Multifunctional-Free", "AFM-Free"))
data$Scenario = factor(data$Scenario, levels = c("AFM-Free", "Multifunctional-100%", "Set-aside-100%"))
}
if(id == "EUForest") {
data <- data %>% filter(Scenario == "Set-aside" | (Scenario == "Multifunctional" & Level == "100%")) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Set-aside-Baseline", "Baseline"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Multifunctional-100%", "Set-aside-25%", "Set-aside-100%"))
data$Group = factor(data$Group, levels = c("RCP6.5-REF", "RCP2.6"), labels = c("RCP6.5 (REF)", "RCP2.6"))
}
#====
#write.csv(data, paste0("./plotting/no_cutoff/Global_PDF_REF-RCP_", id ,"_ecoregion.csv"), row.names = FALSE)
df <- left_join(shp, data)
# if (region == "global") {
#
#   df <- df %>% filter(Values >= 0)
#
# }
# Zoom ====
if (Zoom == TRUE) {
Globiom_eco_org <- read.csv("./grouped_land_use_files/GLOBIOM_Ecoregion.csv", header = TRUE)
# rearrange data in Globiom_eco
Globiom_eco_org <- filter(Globiom_eco_org, Ecoregion!="Lake", Ecoregion != "Rock and Ice") %>%
dplyr::rename(eco_code = Ecoregion)
Globiom_eco_org = droplevels(Globiom_eco_org, "Lake", "Rock and Ice")  #erase these two names from the list of factors
df <- join_regions(df, Globiom_eco_org) %>%
filter(Globiom_Reg == region)
}
#====
df <- df %>% filter(Scenario != "NA")
if(map == "PDFha") {
df <- df %>% mutate(Values = log10(Values))
df$Values[is.infinite(df$Values)] <- NA
}
#test = "RdYlBu"
#pal <- c("#fafafa", "#EAEDF6", "#D7DFEF", "#C5D1E9", "#B2C3E2", "#A0B5DC", "#8CA7D5", "#789ACF", "#638CC8", "#4B7FC3", "#3872B6", "#3165A2", "#2B598E", "#244D7B", "#1E4069")
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
# this is the palette to use:
pal <- c("#fafafa", "#f0f9e8", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081", "#1E4069", "#011959")
# #f3f7f0
ptm <- proc.time()
if (length(year) > 1) {
#pdf(file = paste0("./plotting/no_cutoff/", map, "_", climate, "_", region, "_", test,"lr.pdf"), width = 8, height = 15)
png(file = paste0(plots_path, map, "_", climate, "_", region, case_subcase, "_", energy_exports , ".png"), width = 6, height = 6, res = 600, units = "in")
} else{
#pdf(file = paste0("./plotting/no_cutoff/", map, "-", id,"_", climate, "_", year[1], "_", region, "_", test,"lr.pdf"), width = 8, height = 4)
png(file = paste0(plots_path, map, "-", id,"_", climate, "_", year[1], "_", region, case_subcase, "_",energy_exports, "_newleg.png"),  width = 6, height = 6, res = 600, units = "in")
}
print(id)
if(id == "EUFootprint" & case_subcase != "_cutoff_mammals") {
li <- c(0, 0.0125)
br <- c(0, 0.003, 0.006, 0.009, 0.012)
}
if(id == "EUForest" & case_subcase != "_cutoff_mammals") {
li <- c(0, 0.008)
br <- c(0, 0.002, 0.004, 0.006, 0.008)
}
if(id = case_subcase == "_cutoff_mammals" | case_subcase == "_Chaudhary2015" |
case_subcase == "_Chaudhary2018" | case_subcase == "_LCImpact") {
li <- c(0, max(df$Values))
br <- round(seq(0, max(df$Values), length = 6), digits = 4)
}
if(id = "EUForest" & (case_subcase == "_cutoff" | case_subcase == "_Chaudhary2015" |
case_subcase == "_Chaudhary2018" | case_subcase == "_LCImpact")) {
li <- c(0, 0.014)
br <- c(0, 0.002, 0.004, 0.006, 0.008, 0.010, 0.012, 0.014)
}
if(id = "EUFootprint" & (case_subcase == "_cutoff" | case_subcase == "_Chaudhary2015" |
case_subcase == "_Chaudhary2018" | case_subcase == "_LCImpact")) {
li <- c(0, 0.015)
br <- c(0, 0.005, 0.010, 0.015)
}
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = NA) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
scale_fill_gradientn(colors = pal, na.value = "white", limits = li, breaks = br) + ################################ this is the line to keep
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 7)) +
theme(strip.background = element_rect(color = NULL, fill = "white", size = 1.5, linetype = "solid"),
strip.text = element_text(size = 8)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
if( region == "global") {figure <- figure + facet_wrap( ~ Scenario, ncol = 1) }
if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
if (region != "global") {
figure <- figure + facet_grid(Group ~ Scenario)
figure <- figure + coord_sf(xlim=c(-15, 45), ylim=c(30, 75))
}
figure
dev.off()
setwd("C:/Users/Rosa/Documents/GitHub/forest-management")
library(pacman)
p_load(dplyr, tidyr, abind, tidyverse, stringr)  # dataframe management and string management
p_load(ggplot2, colorspace, scico, viridis, RColorBrewer, gridExtra, nord, ggpubr, sf, sp, rgdal) # plotting
select <- dplyr::select
source("./aggregation_plotting/scripts_aggregation/aggregate_results.R")           # functions to convert the results of the model in a single .Rdata file
source("./aggregation_plotting/scripts_aggregation/global_Rdata-to-csv.R")                 # functions to convert the .Rdata file to several .csv for impacts of global land use
source("./aggregation_plotting/scripts_aggregation/areas_Rdata-to-csv.R")                   # functions to convert the .Rdata file to several .csv for areas
source("./aggregation_plotting/scripts_charts/global_time-series.R")                            # functions to plot the impacts of global land use
source("./aggregation_plotting/scripts_charts/map_areas.R")                            # functions to plot the impacts of global land use
source("./aggregation_plotting/scripts_aggregation/EU_Rdata-to-csv.R")                      # functions to convert the .Rdata file to several .csv for EU impacts
source("./aggregation_plotting/scripts_charts/EU_barplots.R")                                   # functions to plot the impacts of EU
source("./aggregation_plotting/scripts_charts/map_PDF.R")                                       # functions to plot the impacts on a map
source("./aggregation_plotting/scripts_aggregation/slost_Globiom.R")
source("./aggregation_plotting/scripts_aggregation/wood.R")
############################ SET THE PATH ##############################
# identify the results to access
type_of_data <- "impacts"       # "impacts" or "areas"
case <- "cutoff"              # cutoff, nocutoff, cutoff_timber, nocutoff_timber, LCImpact, Chaudhary2015 or Chaudhary2018
subcase <- ""                   # e.g. plants, mammals or birds (end of the csv files)
case_areas <- "notimber"        # "notimber" or "timber"
energy_exports <- "EPnoex"    # "ex" (Footprint includes energy plantations, Internal EU does not include energy crops but includes exports)
# "EPnoex" (Footprint includes energy plantations and Internal EU includes energy crop and exports)
# "noEPnoex" (Footprint does not include energy plantations, Internal EU does not include nor energy crop nor exports)
if(subcase == "") {
case_subcase <- paste0("_", case)
} else {case_subcase <- paste0("_", case, "_", subcase)}
CI <- FALSE # TRUE or FALSE
year = "2100"
############################ RESULTS DIRECTLY FROM THE MODEL ##############################
# access the results obtained directly from the model
folder_slost = paste0("./results/slost/species-lost_", case, "/")
file_slost = "Slost_mg_"     # in the call of the file the year and the subcase are added
folder_areas = paste0("./results/areas/", case_areas , "/mg/disaggregated/")
############################ ACCESS THE FOLDER WHERE RESULTS ARE AGGREGATED AND PLOTTED ##############################
# calculation -> PLOTTING -> RESULTS -> SUBFOLDER, whose name marks may refer to different types of results (with cutoff, without cutoff, with timber, without timber, etc)
# -> CSV or PLOTS or .Rdata files
mainfolder <- "./aggregation_plotting/results_plots-csv/"
subfolder <- paste0(case, "/")  # subfolder from where the files must be loaded or to where the files must be saved
plots_path <- paste0(mainfolder, subfolder,"plots/")  # path used to save the plots (generated using the .csv data)
file_rdata <- paste0("sums", case_subcase, ".Rdata")
file_rdata_areas <- paste0("areas_", case_areas, ".Rdata")
rdata_path <- paste0(mainfolder, subfolder, file_rdata)
rdata_path_areas <- paste0(mainfolder, "areas/", case_areas, "/", file_rdata_areas)
csv_path <- paste0(mainfolder, subfolder,"csv/")      # path used to save csv (generated using the .Rdata)
csv_path_areas <-  paste0(mainfolder, "areas/", case_areas, "/")     # path used to save csv with data on areas (generated using the .Rdata)
EUForest <- read.csv("./grouped_land_use_files/EUWood_forest.csv", header = TRUE, check.names = FALSE) # total wood harvested from EU 28 forests (roundwood and energywood >including  fuelwood and logging residues)
EUEnergy <- read.csv("./grouped_land_use_files/EUWood_energycrops.csv", header = TRUE, check.names = FALSE) # energy-wood form energy crops cultivated in the EU
importForest <- read.csv("./grouped_land_use_files/ImportWood_forest.csv", header = TRUE, check.names = FALSE) # total wood imported from forests outside the EU28 (in form of roundwood, semifinished products and wood pellets for energy from industrial byproducts)
importEnergy <- read.csv("./grouped_land_use_files/ImportWood_energyplantations.csv", header = TRUE, check.names = FALSE) # energywood imported exclusively from energy plantations cultivated outside the EU (IP_pellets)
exportForest <- read.csv("./grouped_land_use_files/ExportWood_forest.csv", header = TRUE, check.names = FALSE) # wood harvested in the EU28 and exported to other regions (in form of roundwood or semi-finished products) [wood already included in the âEU28_wood_forestâ]
importByproducts <- read.csv("./grouped_land_use_files/ImportWood_byproducts.csv", header = TRUE, check.names = FALSE) # energy wood imported from outside EU in form of pellets obtained as byproducts of the forest industry
# list containing all the loaded dataframes
data.list = list("EUForest" = EUForest, "EUEnergy" = EUEnergy, "importForest" = importForest, "importEnergy" = importEnergy, "exportForest" = exportForest, "importByproducts" = importByproducts)
tstep = seq(from = 2000, to = 2100, by = 10)
ntstep = length(tstep) #time steps: 2000 -> 2100
# for each element of the list (each dataframe), create a single column (Year) containing all the time values and one column with the Mm3
list.temp <- lapply(data.list, function(x) pivot_longer(x, cols = 5:(length(x)-1), names_to = "Year", values_to = toString(x[1, length(x)])) %>%
select(-Category))
# puts together all the dataframes
df <- reduce(list.temp, full_join)
rm(data.list, list.temp)
df[is.na(df)] <- 0
# tidies the dataframe (renames some cells, unifies some columns, arranges the df) such that it can be joined to the df with the species loss
df1 <- data.frame(df %>% mutate(Wood_forest_EU = Wood_forest_EU - Wood_forest_ex) %>%                                                             # exports are included in the general EU wood production, this difference keeps them separate
rename(Group = Mitigation_scenario, Management = Management_scenario) %>%
mutate(Region = str_replace(Region, "Pacific_Islands", "Pacific_Island")) %>%
unite("Scenario", Group:Management, sep = "_") %>%
arrange(Region, Scenario, Year))
levels(df1$Region) <- sort(levels(df1$Region))
# loads the PDF dataframe and tidies it
df2 <- read.csv(paste0(csv_path, "slost-globiom", case_subcase, ".csv"), header = TRUE, check.names = FALSE) # total wood harvested from EU 28 forests (roundwood and energywood >including  fuelwood and logging residues)
df2 <- df2 %>% rename(Region = Globiom_Reg) %>%
filter(Region != "NN") %>%
arrange(Region, Scenario, Year) %>%
mutate(Year = as.character(Year))
df2 = droplevels( df2, "NN")
# puts together the production and the impacts
# focus on EU
head(df1)
head(df2)
