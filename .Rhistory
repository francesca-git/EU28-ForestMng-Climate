#
}
if (ratio == TRUE) {
data_wide <- data.frame(data %>% mutate(Scenario = str_replace(Scenario, "Close-to-nature 50%", "CFM50"),
Scenario = str_replace(Scenario, "Close-to-nature 25%", "CFM25"),
Scenario = str_replace(Scenario, "Set-aside 50%", "SFM50"),
Scenario = str_replace(Scenario, "Set-aside 25%", "SFM25")) %>%
unite("Scenario", c(Group, Scenario), sep = "_") %>%
pivot_wider(names_from = Scenario, values_from = Values)) %>%
mutate_if(is.numeric, ~./RCP6.5_Baseline)
#data_wide[is.na(data_wide)] <- 0
data_long <- data.frame(data_wide %>% pivot_longer(cols = RCP2.6_CFM50:RCP6.5_SFM25, names_to = "Scenario", values_to = "Values") %>%
separate(Scenario, into = c("Group", "Scenario"), sep = "_")  %>%
arrange(Group, Year, Scenario, eco_code))
data_long <- data_long %>%
mutate(Scenario = str_replace(Scenario, "CFM25", "Close-to-nature-25%")) %>%
mutate(Scenario = str_replace(Scenario, "CFM50", "Close-to-nature-50%")) %>%
mutate(Scenario = str_replace(Scenario, "SFM25", "Set-aside-25%")) %>%
mutate(Scenario = str_replace(Scenario, "SFM50", "Set-aside-50%"))
data_long$Scenario = factor(data_long$Scenario, levels = c("Baseline", "Close-to-nature-25%", "Close-to-nature-50%", "Set-aside-25%", "Set-aside-50%"))
#data_long[data_long$eco_code == "PA1205", "Values"] = NaN
data <- data_long
# data_wide <- data.frame(data %>% pivot_wider(names_from = Scenario, values_from = Values)) %>%
#               transmute(Group = Group, eco_code = eco_code, Year = Year, Close.to.nature.50. = Close.to.nature.50., Close.to.nature.25. = Close-to-nature.25.,
#                         Set.aside.50. = Set.aside.50., Set.aside.25. = Set.aside.25., Baseline = Baseline) %>%
#                 mutate_if(is.numeric, ~./Baseline)
#
# data_long <- data.frame(data_wide %>% pivot_longer(cols = Close.to.nature.50.:Baseline, names_to = "Scenario", values_to = "Values") %>%
#               arrange(Group, Year, Scenario, eco_code))
#
# data_long <- data_long %>%  mutate(Scenario = str_replace(Scenario, "Baseline", "Baseline")) %>%
#               mutate(Scenario = str_replace(Scenario, "Close.to.nature.25.", "Close-to-nature-25%")) %>%
#                 mutate(Scenario = str_replace(Scenario, "Close.to.nature.50.", "Close-to-nature-50%")) %>%
#                     mutate(Scenario = str_replace(Scenario, "Set.aside.25.", "Set-aside-25%")) %>%
#                       mutate(Scenario = str_replace(Scenario, "Set.aside.50.", "Set-aside-50%"))
#       data_long$Scenario = factor(data_long$Scenario, levels = c("Baseline", "AFM-Free", "Close-to-nature-25%", "Close-to-nature-50%", "Set-aside-25%", "Set-aside-50%"))
#
# data_long[data_long$eco_code == "PA1205", "Values"] = NaN
#
# data <- data_long
}
if (difference == TRUE) {
data_wide <- data.frame(data %>% mutate(Scenario = str_replace(Scenario, "Close-to-nature 50%", "CFM50"),
Scenario = str_replace(Scenario, "Close-to-nature 25%", "CFM25"),
Scenario = str_replace(Scenario, "Set-aside 50%", "SFM50"),
Scenario = str_replace(Scenario, "Set-aside 25%", "SFM25")) %>%
filter(Scenario != "CFM25" & Scenario != "SFM25") %>%
unite("Scenario", c(Group, Scenario), sep = "_") %>%
pivot_wider(names_from = Scenario, values_from = Values)) %>%
mutate_if(is.numeric, ~.-RCP6.5_Baseline)
#data_wide[is.na(data_wide)] <- 0
data_long <- data.frame(data_wide %>% pivot_longer(cols = RCP2.6_CFM50:RCP6.5_SFM25, names_to = "Scenario", values_to = "Values") %>%
separate(Scenario, into = c("Group", "Scenario"), sep = "_")  %>%
arrange(Group, Year, Scenario, eco_code))
data_long <- data_long %>%  mutate(Scenario = str_replace(Scenario, "Baseline", "Baseline")) %>%
#mutate(Scenario = str_replace(Scenario, "CFM25", "Close-to-nature-25%")) %>%
mutate(Scenario = str_replace(Scenario, "CFM50", "Close-to-nature-50%")) %>%
#mutate(Scenario = str_replace(Scenario, "SFM25", "Set-aside-25%")) %>%
mutate(Scenario = str_replace(Scenario, "SFM50", "Set-aside-50%"))
data_long$Scenario = factor(data_long$Scenario, levels = c("Baseline", "AFM-Free", "Close-to-nature-50%", "Set-aside-50%"))
#data_long[data_long$eco_code == "PA1205", "Values"] = NaN
data <- data_long
}
data_wide <- data.frame(data %>% mutate(Scenario = str_replace(Scenario, "Close-to-nature 50%", "CFM50"),
Scenario = str_replace(Scenario, "Close-to-nature 25%", "CFM25"),
Scenario = str_replace(Scenario, "Set-aside 50%", "SFM50"),
Scenario = str_replace(Scenario, "Set-aside 25%", "SFM25")) %>%
filter(Scenario != "CFM25" & Scenario != "SFM25") %>%
unite("Scenario", c(Group, Scenario), sep = "_") %>%
pivot_wider(names_from = Scenario, values_from = Values)) %>%
mutate_if(is.numeric, ~.-RCP6.5_Baseline)
if(map == "PDF") {
legend = "PDF (%)"
data <- read.csv(paste0(results_path, "/", result_files, year[1], file_label, ".csv"))
if (length(year) > 1) {
data_temp <- read.csv(paste0(results_path, "/", result_files, year[2], file_label, ".csv"))
data <- data %>% full_join(data_temp)
}
}
if(map == "PDFha") {
legend = "PDF(%)/ha (logarithmic scale)"
data <- read.csv(paste0(csv_path, "PDF-ha.csv"), header = TRUE)
if(id == "Global") {data <- data %>% filter(Year == "2100" | Year == "2020")
}else if (id != "Global")  {data <- data %>% filter(Year == "2100")}
}
#====
# Rename elements ====
data <- data %>% separate(Scenario, into = c("Group", "Scenario", "Level"), sep = "_") %>%                                       # separate the column Scenario into three columns
mutate(Level = str_replace(Level,"noAF", "Baseline"), Level = str_replace(Level,"AF0", "Free"),  # rename the factors in the column with Level information
Level = str_replace(Level,"AF25", "12.5%"), Level = str_replace(Level,"AF50", "25%"),
Level = str_replace(Level,"AF75", "37.5%"), Level = str_replace(Level,"AF100", "50%"),
Group = str_replace(Group, "RCP", "RCP2.6"),  Group = str_replace(Group, "REF", "RCP6.5"), Scenario = str_replace(Scenario,"MFM","Close-to-nature"), Scenario = str_replace(Scenario, "SFM", "Set-aside")) #%>%                                                              # rename the rcp scenario
#unite("Scenario", Group:Level, sep = "_")                                                                   # re-merge the columns describing the scenario to keep it as it was initially
#====
# Filter the elements according to what we want to plot ====
data <- data %>% dplyr::filter(Group %in% group) %>%
dplyr::filter(Scenario %in% scenario) %>%
dplyr::filter(Level %in% level) %>%
mutate(Year = as.character(Year))
#====
# Sum the rows which should be aggregated ====
data <- data %>%
mutate_if(is.numeric, ~.*100) %>%
mutate(Global = rowSums(select(., contains("median"))),
EUFootprint = case_when((energy_exports == "ex" | energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & ((contains("EP") & contains("EU"))|(starts_with("For") & contains("EU"))|(contains("EP") & contains("im"))|(starts_with("For_") & contains("im")))), na.rm = TRUE),
# For_ClearCut_EU_median + For_ClearCut_im_median + For_Retention_EU_median + For_Plantation_im_median + For_TimberPlant_EU_median +
#   + For_SelectionSystem_EU_median + For_Selective_im_median + EP_EU_median + EP_conv_EU_median + EP_conv_im_median + ForOther_Extensive_EU_median +
#   + ForOther_Intensive_EU_median,
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For") & contains("EU"))|(starts_with("For_") & contains("im")))), na.rm = TRUE)),
EUForest = case_when((energy_exports == "ex")
~ rowSums(select(., contains("median")& ((starts_with("For_") & (contains("EU")|contains("ex"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & (((starts_with("For_") | starts_with("EP") ) & (contains("EU"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For_") & contains("EU")) | (contains("ForOther") & contains("EU")))), na.rm = TRUE))
) %>%
select(Group, Scenario, Level, Ecoregion, Year, contains(id)) %>%
dplyr::rename_at(vars(all_of(id)), ~ "Values") %>%
dplyr::rename(eco_code = Ecoregion)
if(id == "Global") {
print("Global")
data <- data %>% filter(Year == "2100" | (Year == "2020" & Group == "RCP6.5")) %>% # for the year 2020, select only one climate scenario
rename(Management = Scenario) %>%
unite("Scenario", c(Year, Group), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "2020-RCP6.5", "2020-RCP6.5/RCP2.6"))
data$Scenario <- factor(data$Scenario, levels = c("2020-RCP6.5/RCP2.6", "2100-RCP6.5", "2100-RCP2.6"), labels = c("2020 - RCP6.5 / RCP2.6", "2100 - RCP6.5", "2100 - RCP2.6"))
}
if(id == "EUFootprint") {
if(graph == "B-25-50") {
print("B-25-50")
data <- data %>% filter(Level == "25%" | Level == "50%" | Level == "Baseline" & Scenario == "Close-to-nature") %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Close-to-nature-Baseline", "Baseline"))
data$Group = factor(data$Group, levels = c("RCP6.5", "RCP2.6"), labels = c("RCP6.5", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Close-to-nature-25%", "Close-to-nature-50%", "Set-aside-25%", "Set-aside-50%"), labels = c("Baseline", "Close-to-nature 25%", "Close-to-nature 50%", "Set-aside 25%" , "Set-aside 50%"))
} else if(graph == "B-50")
print("B-50")
data <- data %>% filter(Level == "50%" | Level == "Baseline" & Scenario == "Close-to-nature") %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Close-to-nature-Baseline", "Baseline"))
data$Group = factor(data$Group, levels = c("RCP6.5", "RCP2.6"), labels = c("RCP6.5", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Close-to-nature-50%", "Set-aside-50%"), labels = c("Baseline", "Close-to-nature 50%", "Set-aside 50%"))
}
if(id == "EUForest") {
print("EUForest")
data <- data %>% filter(Level == "25%" | Level == "50%" | (Level == "Baseline" & Scenario == "Close-to-nature") | (Level == "Free" & Scenario == "Close-to-nature")) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Close-to-nature-Baseline", "Baseline"))
data$Group = factor(data$Group, levels = c("RCP6.5", "RCP2.6"), labels = c("RCP6.5", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Close-to-nature-25%", "Set-aside-25%", "Close-to-nature-50%", "Set-aside-50%"), labels = c("Baseline", "Close-to-nature 25%", "Close-to-nature 50%", "Set-aside 25%" , "Set-aside 50%"))
# data <- data %>% filter(Level == "50%" | (Level == "Baseline" & Scenario == "Close-to-nature") | (Level == "Free" & Scenario == "Close-to-nature")) %>%
#                     unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
#                       mutate(Scenario = str_replace(Scenario, "Close-to-nature-Baseline", "Baseline"))
#  data$Group = factor(data$Group, levels = c("RCP6.5", "RCP2.6"), labels = c("RCP6.5", "RCP2.6"))
# data$Scenario = factor(data$Scenario, levels = c("Baseline", "Close-to-nature-50%", "Set-aside-50%"), labels = c("Baseline (noAFM)", "Close-to-nature 50%", "Set-aside 50%"))
#
}
data_wide <- data.frame(data %>% mutate(Scenario = str_replace(Scenario, "Close-to-nature 50%", "CFM50"),
Scenario = str_replace(Scenario, "Close-to-nature 25%", "CFM25"),
Scenario = str_replace(Scenario, "Set-aside 50%", "SFM50"),
Scenario = str_replace(Scenario, "Set-aside 25%", "SFM25")) %>%
filter(Scenario != "CFM25" & Scenario != "SFM25") %>%
unite("Scenario", c(Group, Scenario), sep = "_") %>%
pivot_wider(names_from = Scenario, values_from = Values)) %>%
mutate_if(is.numeric, ~.-RCP6.5_Baseline)
#data_wide[is.na(data_wide)] <- 0
head(data_wide)
data_long <- data.frame(data_wide %>% pivot_longer(cols = RCP2.6_CFM50:RCP6.5_SFM50, names_to = "Scenario", values_to = "Values") %>%
separate(Scenario, into = c("Group", "Scenario"), sep = "_")  %>%
arrange(Group, Year, Scenario, eco_code))
data_long <- data_long %>%  mutate(Scenario = str_replace(Scenario, "Baseline", "Baseline")) %>%
#mutate(Scenario = str_replace(Scenario, "CFM25", "Close-to-nature-25%")) %>%
mutate(Scenario = str_replace(Scenario, "CFM50", "Close-to-nature-50%")) %>%
#mutate(Scenario = str_replace(Scenario, "SFM25", "Set-aside-25%")) %>%
mutate(Scenario = str_replace(Scenario, "SFM50", "Set-aside-50%"))
data_long$Scenario = factor(data_long$Scenario, levels = c("Baseline", "AFM-Free", "Close-to-nature-50%", "Set-aside-50%"))
#data_long[data_long$eco_code == "PA1205", "Values"] = NaN
data <- data_long
head(data)
df <- left_join(shp, data)
# Zoom ====
if (Zoom == TRUE) {
EU_map <- st_read(dsn = "./scripts/plotting/maps_shapefiles/Map_EU_dissolved", layer = "dissolved_EU")
}
#====
df <- df %>% filter(Scenario != "NA")
if(map == "PDFha" | ratio == TRUE) {
df <- df %>% mutate(Values = log10(Values))
df$Values[is.infinite(df$Values)] <- NA
}
#test = "RdYlBu"
#pal <- c("#fafafa", "#EAEDF6", "#D7DFEF", "#C5D1E9", "#B2C3E2", "#A0B5DC", "#8CA7D5", "#789ACF", "#638CC8", "#4B7FC3", "#3872B6", "#3165A2", "#2B598E", "#244D7B", "#1E4069")
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
# this is the palette to use:
pal <- c("#fafafa", "#f0f9e8", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081", "#1E4069", "#011959")
# #f3f7f0
ptm <- proc.time()
if (length(year) > 1) {
png(file = paste0(plots_path, map, "_", climate, "_", region, file_label, "_", energy_exports , "_diff.png"), width = 7, height = 12, res = 600, units = "in")
} else{
#png(file = paste0(plots_path, map, "-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, "_diff.png"),  width = 10, height = 18, res = 600, units = "in")
png(file = paste0(plots_path, map, "-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, "_diff.png"),  width = 20, height = 10, res = 600, units = "in")
}
print(id)
# max for EUForest: 0.006180501
# max for EUFootprint: 0.007033453
# if(id == "EUFootprint")  {# & file_label != "_cutoff_mammals") {
#   li <- c(0, 0.020)# max(data$Values))
#   br <- c(0, 0.005, 0.010, 0.015)
# }
#
# if(id == "EUForest") { # & file_label != "_cutoff_mammals") {
#   li <- c(0, 0.015)
#   br <- c(0, 0.005, 0.010, 0.015)
# }
# if(id == "EUFootprint")  {# & file_label != "_cutoff_mammals") {
#   li <- c(0, 0.010)# max(data$Values))
#   br <- c(0, 0.002, 0.004, 0.006, 0.008, 0.010)
# }
#
# if(id == "EUForest") { # & file_label != "_cutoff_mammals") {
#   li <- c(0, 0.010)
#   br <- c(0, 0.002, 0.004, 0.006, 0.008, 0.010)
# }
#
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = "gray45", lwd = 0.2) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
#scale_fill_gradientn(colors = pal, na.value = "white") + # , limits = li, breaks = br) + ################################ this is the line to keep
#scale_fill_distiller(palette = "RdYlGn", na.value = "white")  +
scale_fill_gradient2(low = "darkgreen", mid = "white",high = "red", midpoint = 0, na.value = "grey98") +
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 17),
axis.text = element_blank(),
legend.title = element_text(size = 17),
legend.text = element_text(size = 17),
legend.key.size = unit(2, "cm"), legend.key.width = unit(1,"cm"),
legend.position = "right") +
theme(strip.background = element_rect(color = NULL, fill = "white", size = 1.5, linetype = "solid"),
strip.text = element_text(size = 17)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
# if( region == "global") {figure <- figure + facet_wrap(~ Group + Scenario, nrow = 4) + coord_sf(ylim=c(-60, 90)) }
if(id == "EUFootprint") {figure <- figure + facet_grid(vars(Scenario), vars(Group)) + coord_sf(ylim=c(-60, 90)) }
if(id == "Global") {figure <- figure + facet_wrap( ~ Scenario, ncol = 1) }
#if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
if (id == "EUForest") {
figure <- figure + geom_sf(data = EU_map, fill = "transparent", colour = "black")
figure <- figure + facet_grid(Scenario ~ Group)
figure <- figure + coord_sf(xlim = c(-15, 40), ylim = c(30, 75))
}
figure
dev.off()
#
#
# figure
View(data_wide)
if(map == "PDF") {
legend = "PDF (%)"
data <- read.csv(paste0(results_path, "/", result_files, year[1], file_label, ".csv"))
if (length(year) > 1) {
data_temp <- read.csv(paste0(results_path, "/", result_files, year[2], file_label, ".csv"))
data <- data %>% full_join(data_temp)
}
}
if(map == "PDFha") {
legend = "PDF(%)/ha (logarithmic scale)"
data <- read.csv(paste0(csv_path, "PDF-ha.csv"), header = TRUE)
if(id == "Global") {data <- data %>% filter(Year == "2100" | Year == "2020")
}else if (id != "Global")  {data <- data %>% filter(Year == "2100")}
}
#====
# Rename elements ====
data <- data %>% separate(Scenario, into = c("Group", "Scenario", "Level"), sep = "_") %>%                                       # separate the column Scenario into three columns
mutate(Level = str_replace(Level,"noAF", "Baseline"), Level = str_replace(Level,"AF0", "Free"),  # rename the factors in the column with Level information
Level = str_replace(Level,"AF25", "12.5%"), Level = str_replace(Level,"AF50", "25%"),
Level = str_replace(Level,"AF75", "37.5%"), Level = str_replace(Level,"AF100", "50%"),
Group = str_replace(Group, "RCP", "RCP2.6"),  Group = str_replace(Group, "REF", "RCP6.5"), Scenario = str_replace(Scenario,"MFM","Close-to-nature"), Scenario = str_replace(Scenario, "SFM", "Set-aside")) #%>%                                                              # rename the rcp scenario
#unite("Scenario", Group:Level, sep = "_")                                                                   # re-merge the columns describing the scenario to keep it as it was initially
#====
# Filter the elements according to what we want to plot ====
data <- data %>% dplyr::filter(Group %in% group) %>%
dplyr::filter(Scenario %in% scenario) %>%
dplyr::filter(Level %in% level) %>%
mutate(Year = as.character(Year))
#====
# Sum the rows which should be aggregated ====
data <- data %>%
mutate_if(is.numeric, ~.*100) %>%
mutate(Global = rowSums(select(., contains("median"))),
EUFootprint = case_when((energy_exports == "ex" | energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & ((contains("EP") & contains("EU"))|(starts_with("For") & contains("EU"))|(contains("EP") & contains("im"))|(starts_with("For_") & contains("im")))), na.rm = TRUE),
# For_ClearCut_EU_median + For_ClearCut_im_median + For_Retention_EU_median + For_Plantation_im_median + For_TimberPlant_EU_median +
#   + For_SelectionSystem_EU_median + For_Selective_im_median + EP_EU_median + EP_conv_EU_median + EP_conv_im_median + ForOther_Extensive_EU_median +
#   + ForOther_Intensive_EU_median,
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For") & contains("EU"))|(starts_with("For_") & contains("im")))), na.rm = TRUE)),
EUForest = case_when((energy_exports == "ex")
~ rowSums(select(., contains("median")& ((starts_with("For_") & (contains("EU")|contains("ex"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "EPnoex")
~ rowSums(select(., contains("median") & (((starts_with("For_") | starts_with("EP") ) & (contains("EU"))) | (contains("ForOther") & contains("EU")))), na.rm = TRUE),
(energy_exports == "noEPnoex")
~ rowSums(select(., contains("median") & ((starts_with("For_") & contains("EU")) | (contains("ForOther") & contains("EU")))), na.rm = TRUE))
) %>%
select(Group, Scenario, Level, Ecoregion, Year, contains(id)) %>%
dplyr::rename_at(vars(all_of(id)), ~ "Values") %>%
dplyr::rename(eco_code = Ecoregion)
if(id == "Global") {
print("Global")
data <- data %>% filter(Year == "2100" | (Year == "2020" & Group == "RCP6.5")) %>% # for the year 2020, select only one climate scenario
rename(Management = Scenario) %>%
unite("Scenario", c(Year, Group), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "2020-RCP6.5", "2020-RCP6.5/RCP2.6"))
data$Scenario <- factor(data$Scenario, levels = c("2020-RCP6.5/RCP2.6", "2100-RCP6.5", "2100-RCP2.6"), labels = c("2020 - RCP6.5 / RCP2.6", "2100 - RCP6.5", "2100 - RCP2.6"))
}
if(id == "EUFootprint") {
if(graph == "B-25-50") {
print("B-25-50")
data <- data %>% filter(Level == "25%" | Level == "50%" | Level == "Baseline" & Scenario == "Close-to-nature") %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Close-to-nature-Baseline", "Baseline"))
data$Group = factor(data$Group, levels = c("RCP6.5", "RCP2.6"), labels = c("RCP6.5", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Close-to-nature-25%", "Close-to-nature-50%", "Set-aside-25%", "Set-aside-50%"), labels = c("Baseline", "Close-to-nature 25%", "Close-to-nature 50%", "Set-aside 25%" , "Set-aside 50%"))
} else if(graph == "B-50")
print("B-50")
data <- data %>% filter(Level == "50%" | Level == "Baseline" & Scenario == "Close-to-nature") %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Close-to-nature-Baseline", "Baseline"))
data$Group = factor(data$Group, levels = c("RCP6.5", "RCP2.6"), labels = c("RCP6.5", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Close-to-nature-50%", "Set-aside-50%"), labels = c("Baseline", "Close-to-nature 50%", "Set-aside 50%"))
}
if(id == "EUForest") {
print("EUForest")
data <- data %>% filter(Level == "25%" | Level == "50%" | (Level == "Baseline" & Scenario == "Close-to-nature") | (Level == "Free" & Scenario == "Close-to-nature")) %>%
unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
mutate(Scenario = str_replace(Scenario, "Close-to-nature-Baseline", "Baseline"))
data$Group = factor(data$Group, levels = c("RCP6.5", "RCP2.6"), labels = c("RCP6.5", "RCP2.6"))
data$Scenario = factor(data$Scenario, levels = c("Baseline", "Close-to-nature-25%", "Set-aside-25%", "Close-to-nature-50%", "Set-aside-50%"), labels = c("Baseline", "Close-to-nature 25%", "Close-to-nature 50%", "Set-aside 25%" , "Set-aside 50%"))
# data <- data %>% filter(Level == "50%" | (Level == "Baseline" & Scenario == "Close-to-nature") | (Level == "Free" & Scenario == "Close-to-nature")) %>%
#                     unite("Scenario", c(Scenario, Level), sep = "-", remove = TRUE) %>%
#                       mutate(Scenario = str_replace(Scenario, "Close-to-nature-Baseline", "Baseline"))
#  data$Group = factor(data$Group, levels = c("RCP6.5", "RCP2.6"), labels = c("RCP6.5", "RCP2.6"))
# data$Scenario = factor(data$Scenario, levels = c("Baseline", "Close-to-nature-50%", "Set-aside-50%"), labels = c("Baseline (noAFM)", "Close-to-nature 50%", "Set-aside 50%"))
#
}
if (ratio == TRUE) {
data_wide <- data.frame(data %>% mutate(Scenario = str_replace(Scenario, "Close-to-nature 50%", "CFM50"),
Scenario = str_replace(Scenario, "Close-to-nature 25%", "CFM25"),
Scenario = str_replace(Scenario, "Set-aside 50%", "SFM50"),
Scenario = str_replace(Scenario, "Set-aside 25%", "SFM25")) %>%
unite("Scenario", c(Group, Scenario), sep = "_") %>%
pivot_wider(names_from = Scenario, values_from = Values)) %>%
mutate_if(is.numeric, ~./RCP6.5_Baseline)
#data_wide[is.na(data_wide)] <- 0
data_long <- data.frame(data_wide %>% pivot_longer(cols = RCP2.6_CFM50:RCP6.5_SFM25, names_to = "Scenario", values_to = "Values") %>%
separate(Scenario, into = c("Group", "Scenario"), sep = "_")  %>%
arrange(Group, Year, Scenario, eco_code))
data_long <- data_long %>%
mutate(Scenario = str_replace(Scenario, "CFM25", "Close-to-nature-25%")) %>%
mutate(Scenario = str_replace(Scenario, "CFM50", "Close-to-nature-50%")) %>%
mutate(Scenario = str_replace(Scenario, "SFM25", "Set-aside-25%")) %>%
mutate(Scenario = str_replace(Scenario, "SFM50", "Set-aside-50%"))
data_long$Scenario = factor(data_long$Scenario, levels = c("Baseline", "Close-to-nature-25%", "Close-to-nature-50%", "Set-aside-25%", "Set-aside-50%"))
#data_long[data_long$eco_code == "PA1205", "Values"] = NaN
data <- data_long
# data_wide <- data.frame(data %>% pivot_wider(names_from = Scenario, values_from = Values)) %>%
#               transmute(Group = Group, eco_code = eco_code, Year = Year, Close.to.nature.50. = Close.to.nature.50., Close.to.nature.25. = Close-to-nature.25.,
#                         Set.aside.50. = Set.aside.50., Set.aside.25. = Set.aside.25., Baseline = Baseline) %>%
#                 mutate_if(is.numeric, ~./Baseline)
#
# data_long <- data.frame(data_wide %>% pivot_longer(cols = Close.to.nature.50.:Baseline, names_to = "Scenario", values_to = "Values") %>%
#               arrange(Group, Year, Scenario, eco_code))
#
# data_long <- data_long %>%  mutate(Scenario = str_replace(Scenario, "Baseline", "Baseline")) %>%
#               mutate(Scenario = str_replace(Scenario, "Close.to.nature.25.", "Close-to-nature-25%")) %>%
#                 mutate(Scenario = str_replace(Scenario, "Close.to.nature.50.", "Close-to-nature-50%")) %>%
#                     mutate(Scenario = str_replace(Scenario, "Set.aside.25.", "Set-aside-25%")) %>%
#                       mutate(Scenario = str_replace(Scenario, "Set.aside.50.", "Set-aside-50%"))
#       data_long$Scenario = factor(data_long$Scenario, levels = c("Baseline", "AFM-Free", "Close-to-nature-25%", "Close-to-nature-50%", "Set-aside-25%", "Set-aside-50%"))
#
# data_long[data_long$eco_code == "PA1205", "Values"] = NaN
#
# data <- data_long
}
if (difference == TRUE) {
data_wide <- data.frame(data %>% mutate(Scenario = str_replace(Scenario, "Close-to-nature 50%", "CFM50"),
Scenario = str_replace(Scenario, "Close-to-nature 25%", "CFM25"),
Scenario = str_replace(Scenario, "Set-aside 50%", "SFM50"),
Scenario = str_replace(Scenario, "Set-aside 25%", "SFM25")) %>%
#filter(Scenario != "CFM25" & Scenario != "SFM25") %>%
unite("Scenario", c(Group, Scenario), sep = "_") %>%
pivot_wider(names_from = Scenario, values_from = Values)) %>%
mutate_if(is.numeric, ~.-RCP6.5_Baseline)
#data_wide[is.na(data_wide)] <- 0
data_long <- data.frame(data_wide %>% pivot_longer(cols = RCP2.6_CFM50:RCP6.5_SFM50, names_to = "Scenario", values_to = "Values") %>%
separate(Scenario, into = c("Group", "Scenario"), sep = "_")  %>%
arrange(Group, Year, Scenario, eco_code))
data_long <- data_long %>%  mutate(Scenario = str_replace(Scenario, "Baseline", "Baseline")) %>%
mutate(Scenario = str_replace(Scenario, "CFM25", "Close-to-nature-25%")) %>%
mutate(Scenario = str_replace(Scenario, "CFM50", "Close-to-nature-50%")) %>%
mutate(Scenario = str_replace(Scenario, "SFM25", "Set-aside-25%")) %>%
mutate(Scenario = str_replace(Scenario, "SFM50", "Set-aside-50%"))
data_long$Scenario = factor(data_long$Scenario, levels = c("Baseline", "AFM-Free", "Close-to-nature-25%", "Close-to-nature-50%", "Set-aside-25%", "Set-aside-50%"))
#data_long[data_long$eco_code == "PA1205", "Values"] = NaN
data <- data_long
}
#data <- data %>% filter(Scenario == "Baseline" | Scenario == "Set-aside-50%")
data_backup <- data
#====
#write.csv(data, paste0("./plotting/no_cutoff/Global_PDF_BAU-RCP_", id ,"_ecoregion.csv"), row.names = FALSE)
# if (region == "global") {
#
#   df <- df %>% filter(Values >= 0)
#
# }
df <- left_join(shp, data)
# Zoom ====
if (Zoom == TRUE) {
EU_map <- st_read(dsn = "./scripts/plotting/maps_shapefiles/Map_EU_dissolved", layer = "dissolved_EU")
}
#====
df <- df %>% filter(Scenario != "NA")
if(map == "PDFha" | ratio == TRUE) {
df <- df %>% mutate(Values = log10(Values))
df$Values[is.infinite(df$Values)] <- NA
}
#test = "RdYlBu"
#pal <- c("#fafafa", "#EAEDF6", "#D7DFEF", "#C5D1E9", "#B2C3E2", "#A0B5DC", "#8CA7D5", "#789ACF", "#638CC8", "#4B7FC3", "#3872B6", "#3165A2", "#2B598E", "#244D7B", "#1E4069")
#pal <- c("#F1F1F1", "#E1EDC9", "#C0E7BB", "#98DEB6", "#6BD1B9", "#3CC2BE", "#1CAEC3", "#3797C3", "#5B7BBD", "#775BAF", "#833993", "#80146E")
# this is the palette to use:
pal <- c("#fafafa", "#f0f9e8", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081", "#1E4069", "#011959")
# #f3f7f0
ptm <- proc.time()
if (length(year) > 1) {
png(file = paste0(plots_path, map, "_", climate, "_", region, file_label, "_", energy_exports , "_diff.png"), width = 7, height = 12, res = 600, units = "in")
} else{
#png(file = paste0(plots_path, map, "-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, "_diff.png"),  width = 10, height = 18, res = 600, units = "in")
png(file = paste0(plots_path, map, "-", id,"_", climate, "_", year[1], "_", region, file_label, "_",energy_exports, "_diff.png"),  width = 20, height = 10, res = 600, units = "in")
}
print(id)
# max for EUForest: 0.006180501
# max for EUFootprint: 0.007033453
# if(id == "EUFootprint")  {# & file_label != "_cutoff_mammals") {
#   li <- c(0, 0.020)# max(data$Values))
#   br <- c(0, 0.005, 0.010, 0.015)
# }
#
# if(id == "EUForest") { # & file_label != "_cutoff_mammals") {
#   li <- c(0, 0.015)
#   br <- c(0, 0.005, 0.010, 0.015)
# }
# if(id == "EUFootprint")  {# & file_label != "_cutoff_mammals") {
#   li <- c(0, 0.010)# max(data$Values))
#   br <- c(0, 0.002, 0.004, 0.006, 0.008, 0.010)
# }
#
# if(id == "EUForest") { # & file_label != "_cutoff_mammals") {
#   li <- c(0, 0.010)
#   br <- c(0, 0.002, 0.004, 0.006, 0.008, 0.010)
# }
#
figure <- ggplot() +
geom_sf(data = shp, fill = "transparent", colour = "gray45", lwd = 0.2) +
geom_sf(data = df, aes(fill = Values), colour = NA) +
#scale_fill_viridis(option = test, na.value = "grey50", direction = -1) + # for PDF
#scale_fill_continuous_diverging(test, c1 = 70, na.value = "white", rev = TRUE) +
#scale_fill_scico(palette = test, direction = 1) + #, begin = 0.5, end = 1) +
#scale_fill_gradientn(colors = pal, na.value = "white") + # , limits = li, breaks = br) + ################################ this is the line to keep
#scale_fill_distiller(palette = "RdYlGn", na.value = "white")  +
scale_fill_gradient2(low = "darkgreen", mid = "white",high = "red", midpoint = 0, na.value = "grey98") +
#labs(fill = "", x = "", y = "", title = title) +
#theme_minimal() +
#scale_fill_distiller(palette = test, direction = 1, na.value = "grey90") +
#scale_fill_continuous_sequential(test, na.value = "white") +
#theme(plot.title = element_text(size = 10, face = "bold.italic")) +
#facet_wrap(~Scenario, nrow = 4, ncol = 2) +
labs(fill = legend) +
theme(text = element_text(size = 17),
axis.text = element_blank(),
legend.title = element_text(size = 17),
legend.text = element_text(size = 17),
legend.key.size = unit(2, "cm"), legend.key.width = unit(1,"cm"),
legend.position = "right") +
theme(strip.background = element_rect(color = NULL, fill = "white", size = 1.5, linetype = "solid"),
strip.text = element_text(size = 17)) +
theme(panel.background = element_blank(),
panel.border = element_rect(colour = "grey", fill = "transparent", size = 0.5),
plot.title = element_text(hjust = 0.5))
# if( region == "global") {figure <- figure + facet_wrap(~ Group + Scenario, nrow = 4) + coord_sf(ylim=c(-60, 90)) }
if(id == "EUFootprint") {figure <- figure + facet_grid(vars(Scenario), vars(Group)) + coord_sf(ylim=c(-60, 90)) }
if(id == "Global") {figure <- figure + facet_wrap( ~ Scenario, ncol = 1) }
#if(length(year) > 1 && region == "global") {figure <- figure + facet_wrap(vars(Scenario))}
if (id == "EUForest") {
figure <- figure + geom_sf(data = EU_map, fill = "transparent", colour = "black")
figure <- figure + facet_grid(Scenario ~ Group)
figure <- figure + coord_sf(xlim = c(-15, 40), ylim = c(30, 75))
}
figure
dev.off()
#
