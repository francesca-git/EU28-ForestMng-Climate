df_Areas_new <- df_Areas_new %>% bind_rows(Areas_temp)
}
df_PDF <- df_PDF %>% arrange(Scenario, Ecoregion, Year)
df_Areas <- df_Areas %>% arrange(Scenario, Ecoregion, Year)
ecoreg_in_Globiom <- unique(df_Areas$Ecoregion)
df_PDF <- df_PDF %>% filter(Ecoregion %in% ecoreg_in_Globiom)
ratio <- bind_cols(ratio[1:3], ratio[4:length(ratio)]/df_Areas[4:length(df_Areas)]) %>%
replace(is.na(.), 0)
df_Areas <- df_Areas_new
rm(df_Areas_new)
df_Areas <- df_Areas %>% arrange(Scenario, Ecoregion, Year)
ratio <- df_PDF
head(ratio)
ratio <- bind_cols(ratio[1:3], ratio[4:length(ratio)]/df_Areas[4:length(df_Areas)]) %>%
replace(is.na(.), 0)
length(ratio)
length(df_Areas)
nrow(ratio)
nrow(df_Areas)
nrow(df_PDF)
folder_slost
unique(df_PDF$Year)
unique(df_PDF$Scenario)
19296/24
19296/24/11
19296/24
# select only median values
PDF <- lapply(myfiles_1, function(x) select(x, Scenario, Ecoregion, Year, contains("median")))
# convert the elements of the list to a single dataframe
df_PDF <- reduce(PDF, full_join)
nrow(df_PDF)
df_PDF <- df_PDF %>% arrange(Scenario, Ecoregion, Year)
df_Areas <- df_Areas %>% arrange(Scenario, Ecoregion, Year)
ratio <- df_PDF
ratio <- bind_cols(ratio[1:3], ratio[4:length(ratio)]/df_Areas[4:length(df_Areas)]) %>%
replace(is.na(.), 0)
nrow(df_PDF)
nrow(df_Areas)
nrow(df_Areas)/804
nrow(df_Areas)/779
nrow(df_Areas)/11
nrow(df_Areas)/24
setwd("C:/Users/Rosa/Documents/GitHub/forest-management")
library(pacman)
p_load(dplyr, tidyr, abind, tidyverse, stringr)  # dataframe management and string management
p_load(ggplot2, colorspace, scico, viridis, RColorBrewer, gridExtra, nord, ggpubr, sf, sp, rgdal) # plotting
select <- dplyr::select
source("./aggregation_plotting/scripts_aggregation/aggregate_results.R")           # functions to convert the results of the model in a single .Rdata file
source("./aggregation_plotting/scripts_aggregation/global_Rdata-to-csv.R")                 # functions to convert the .Rdata file to several .csv for impacts of global land use
source("./aggregation_plotting/scripts_aggregation/areas_Rdata-to-csv.R")                   # functions to convert the .Rdata file to several .csv for areas
source("./aggregation_plotting/scripts_charts/global_time-series.R")                            # functions to plot the impacts of global land use
source("./aggregation_plotting/scripts_charts/map_areas.R")                            # functions to plot the impacts of global land use
source("./aggregation_plotting/scripts_aggregation/EU_Rdata-to-csv.R")                      # functions to convert the .Rdata file to several .csv for EU impacts
source("./aggregation_plotting/scripts_charts/EU_barplots.R")                                   # functions to plot the impacts of EU
source("./aggregation_plotting/scripts_charts/map_PDF.R")                                       # functions to plot the impacts on a map
source("./aggregation_plotting/scripts_aggregation/slost_Globiom.R")
source("./aggregation_plotting/scripts_aggregation/wood.R")
source("./aggregation_plotting/scripts_aggregation/slost_ha.R")
############################ SET THE PATH ##############################
# identify the results to access
type_of_data <- "impacts"       # "impacts" or "areas"
case <- "cutoff"              # cutoff, nocutoff, cutoff_timber, nocutoff_timber, LCImpact, Chaudhary2015 or Chaudhary2018
subcase <- ""                    # e.g. plants, mammals or birds (end of the csv files)
case_areas <- "notimber"        # "notimber" or "timber"
energy_exports <- "EPnoex"    # "ex" (Footprint includes energy plantations, Internal EU does not include energy crops but includes exports)
# "EPnoex" (Footprint includes energy plantations and Internal EU includes energy crop and exports)
# "noEPnoex" (Footprint does not include energy plantations, Internal EU does not include nor energy crop nor exports)
if(subcase == "") {
case_subcase <- paste0("_", case)
} else {case_subcase <- paste0("_", case, "_", subcase)}
CI <- FALSE # TRUE or FALSE
year = "2100"
############################ RESULTS DIRECTLY FROM THE MODEL ##############################
# access the results obtained directly from the model
folder_slost = paste0("./results/slost/species-lost_", case, "/")
file_slost = "Slost_mg_"     # in the call of the file the year and the subcase are added
folder_areas = paste0("./results/areas/", case_areas , "/mg/disaggregated/")
############################ ACCESS THE FOLDER WHERE RESULTS ARE AGGREGATED AND PLOTTED ##############################
# calculation -> PLOTTING -> RESULTS -> SUBFOLDER, whose name marks may refer to different types of results (with cutoff, without cutoff, with timber, without timber, etc)
# -> CSV or PLOTS or .Rdata files
mainfolder <- "./aggregation_plotting/results_plots-csv/"
subfolder <- paste0(case, "/")  # subfolder from where the files must be loaded or to where the files must be saved
plots_path <- paste0(mainfolder, subfolder,"plots/")  # path used to save the plots (generated using the .csv data)
file_rdata <- paste0("sums", case_subcase, ".Rdata")
file_rdata_areas <- paste0("areas_", case_areas, ".Rdata")
rdata_path <- paste0(mainfolder, subfolder, file_rdata)
rdata_path_areas <- paste0(mainfolder, "areas/", case_areas, "/", file_rdata_areas)
csv_path <- paste0(mainfolder, subfolder,"csv/")      # path used to save csv (generated using the .Rdata)
csv_path_areas <-  paste0(mainfolder, "areas/", case_areas, "/")     # path used to save csv with data on areas (generated using the .Rdata)
temp = list.files(path = paste0(folder_slost) , pattern = paste0("*", case_subcase, ".csv"), full.names = TRUE)   # save as list the paths of all .csv files in the selected folder
myfiles_1 = lapply(temp, read.csv)            # read the files, create a list where in each element is loaded one of the file as df
rm(temp)
temp = list.files(path = paste0(folder_areas) , pattern = paste0("*.csv"), full.names = TRUE)   # save as list the paths of all .csv files in the selected folder
myfiles_2 = lapply(temp, read.csv)            # read the files, create a list where in each element is loaded one of the file as df
rm(temp)
tstep = seq(from = 2000, to = 2100, by = 10)    # time steps
for_management = c("noAFM", "AFMfree", "AFM25", "AFM50", "AFM75", "AFM100") # new names for management scenarios
names(myfiles_1) = sapply(tstep, FUN = toString)  # rename each element of the list with the corresponding time step
names(myfiles_2) = sapply(tstep, FUN = toString)  # rename each element of the list with the corresponding time step
# select only median values
PDF <- lapply(myfiles_1, function(x) select(x, Scenario, Ecoregion, Year, contains("median")))
# remove columns that do not have a corresponding value in PDF
Areas <- lapply(myfiles_2, function(x) select(x, -contains("new"), -contains("org")))
for (i in 1:length(Areas)) {Areas[[i]]$Year = as.character(tstep[i])}
# convert the elements of the list to a single dataframe
df_PDF <- reduce(PDF, full_join)
nrow(df_Areas)
nrow(df_PDF)
nrow(df_PDF)/804
nrow(df_PDF)/804/11
df_Areas <- reduce(Areas, full_join)
nrow(df_Areas)
nrow(df_Areas)/779
nrow(df_Areas)/779/11
df_Areas <- df_Areas %>% select(Scenario:Ecoregion, Year, (3:length(df_Areas) - 1)) %>%
rename(For_Plantation_im = For_PlantationFuel_im) %>%
mutate(For_Plantation_im = For_Plantation_im + For_TimberPlant_im) %>%
select(-For_TimberPlant_im)
nrow(df_Areas)
Ecoregions <- df_PDF %>% select(Ecoregion) %>% distinct()
Scenarios <- unique(df_PDF$Scenario)
nscenarios <- length(Scenarios)
Scenarios
Scenarios <- unique(df_Areas$Scenario)
nscenarios <- length(Scenarios)
nscenarios
Scenarios
for(sc in 1:nscenarios) {
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
full_join(Ecoregions) %>%
mutate(Ecoregion = as.character(Ecoregion)) %>%
arrange(Ecoregion) %>%
mutate(Ecoregion = as.factor(Ecoregion)) %>%
mutate(Scenario = toString(Scenarios[sc]))
df_Areas_new <- df_Areas_new %>% bind_rows(Areas_temp)
}
df_Areas_new <- data.frame(matrix(NA, nrow = 0, ncol = 0))
for(sc in 1:nscenarios) {
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
full_join(Ecoregions) %>%
mutate(Ecoregion = as.character(Ecoregion)) %>%
arrange(Ecoregion) %>%
mutate(Ecoregion = as.factor(Ecoregion)) %>%
mutate(Scenario = toString(Scenarios[sc]))
df_Areas_new <- df_Areas_new %>% bind_rows(Areas_temp)
}
nrow(df_Areas)
nrow(df_Areas_new)
df_Areas_new <- data.frame(matrix(NA, nrow = 0, ncol = 0))
# the current df_Areas dataframe contains only the ecoregions considered in GLOBIOM, therefore we need to add
# those which are in the df_PDF and not in df_Areas.
for(sc in 1:nscenarios) {
print(sc)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
full_join(Ecoregions) %>%
mutate(Ecoregion = as.character(Ecoregion)) %>%
arrange(Ecoregion) %>%
mutate(Ecoregion = as.factor(Ecoregion)) %>%
mutate(Scenario = toString(Scenarios[sc]))
print(nrow(Areas_temp))
df_Areas_new <- df_Areas_new %>% bind_rows(Areas_temp)
}
8594/804
nrow(Ecoregions)
rm(Areas_temp)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc]))
print(nrow(Areas_temp))
8569/779
rm(Areas_temp)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
full_join(Ecoregions)
nrow(Areas_temp)
804*11
804*11-8594
250/22
250/11
nrow(Ecoregion)
nrow(Ecoregions)
View(Areas_temp)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
full_join(Ecoregions)
df_Areas_new <- data.frame(matrix(NA, nrow = 0, ncol = 0))
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
full_join(Ecoregions)
View(Areas_temp)
View(Ecoregions)
class(Ecoregions)
class(Ecoregions$Ecoregion)
Ecoregions <- df_PDF %>% select(Ecoregion) %>% distinct()
Ecoregions$Ecoregion <- as.factor(Ecoregions$Ecoregion)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
full_join(Ecoregions)
nrow(Areas_temp)
View(Areas_temp)
rm(Areas_temp)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
right_join(Ecoregions)
View(Areas_temp)
804*11
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
right_join(Ecoregions)
View(Areas_temp)
View(df_PDF)
Ecoregions_scenarios <- df_PDF %>% select(Scenario, Year, Ecoregion) %>% distinct()
Ecoregions_scenarios$Ecoregion <- as.factor(Ecoregions_scenarios$Ecoregion)
df_Areas_new <- data.frame(matrix(NA, nrow = 0, ncol = 0))
# the current df_Areas dataframe contains only the ecoregions considered in GLOBIOM, therefore we need to add
# those which are in the df_PDF and not in df_Areas.
for(sc in 1:nscenarios) {
print(sc)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
right_join(Ecoregions_scenarios) %>%
mutate(Ecoregion = as.character(Ecoregion)) %>%
arrange(Ecoregion) %>%
mutate(Ecoregion = as.factor(Ecoregion)) %>%
mutate(Scenario = toString(Scenarios[sc]))
print(nrow(Areas_temp))
df_Areas_new <- df_Areas_new %>% bind_rows(Areas_temp)
}
str(df_PDF)
str(df_Areas)
as.integer("2000")
setwd("C:/Users/Rosa/Documents/GitHub/forest-management")
library(pacman)
p_load(dplyr, tidyr, abind, tidyverse, stringr)  # dataframe management and string management
p_load(ggplot2, colorspace, scico, viridis, RColorBrewer, gridExtra, nord, ggpubr, sf, sp, rgdal) # plotting
select <- dplyr::select
source("./aggregation_plotting/scripts_aggregation/aggregate_results.R")           # functions to convert the results of the model in a single .Rdata file
source("./aggregation_plotting/scripts_aggregation/global_Rdata-to-csv.R")                 # functions to convert the .Rdata file to several .csv for impacts of global land use
source("./aggregation_plotting/scripts_aggregation/areas_Rdata-to-csv.R")                   # functions to convert the .Rdata file to several .csv for areas
source("./aggregation_plotting/scripts_charts/global_time-series.R")                            # functions to plot the impacts of global land use
source("./aggregation_plotting/scripts_charts/map_areas.R")                            # functions to plot the impacts of global land use
source("./aggregation_plotting/scripts_aggregation/EU_Rdata-to-csv.R")                      # functions to convert the .Rdata file to several .csv for EU impacts
source("./aggregation_plotting/scripts_charts/EU_barplots.R")                                   # functions to plot the impacts of EU
source("./aggregation_plotting/scripts_charts/map_PDF.R")                                       # functions to plot the impacts on a map
source("./aggregation_plotting/scripts_aggregation/slost_Globiom.R")
source("./aggregation_plotting/scripts_aggregation/wood.R")
source("./aggregation_plotting/scripts_aggregation/slost_ha.R")
############################ SET THE PATH ##############################
# identify the results to access
type_of_data <- "impacts"       # "impacts" or "areas"
case <- "cutoff"              # cutoff, nocutoff, cutoff_timber, nocutoff_timber, LCImpact, Chaudhary2015 or Chaudhary2018
subcase <- ""                    # e.g. plants, mammals or birds (end of the csv files)
case_areas <- "notimber"        # "notimber" or "timber"
energy_exports <- "EPnoex"    # "ex" (Footprint includes energy plantations, Internal EU does not include energy crops but includes exports)
# "EPnoex" (Footprint includes energy plantations and Internal EU includes energy crop and exports)
# "noEPnoex" (Footprint does not include energy plantations, Internal EU does not include nor energy crop nor exports)
if(subcase == "") {
case_subcase <- paste0("_", case)
} else {case_subcase <- paste0("_", case, "_", subcase)}
CI <- FALSE # TRUE or FALSE
year = "2100"
############################ RESULTS DIRECTLY FROM THE MODEL ##############################
# access the results obtained directly from the model
folder_slost = paste0("./results/slost/species-lost_", case, "/")
file_slost = "Slost_mg_"     # in the call of the file the year and the subcase are added
folder_areas = paste0("./results/areas/", case_areas , "/mg/disaggregated/")
############################ ACCESS THE FOLDER WHERE RESULTS ARE AGGREGATED AND PLOTTED ##############################
# calculation -> PLOTTING -> RESULTS -> SUBFOLDER, whose name marks may refer to different types of results (with cutoff, without cutoff, with timber, without timber, etc)
# -> CSV or PLOTS or .Rdata files
mainfolder <- "./aggregation_plotting/results_plots-csv/"
subfolder <- paste0(case, "/")  # subfolder from where the files must be loaded or to where the files must be saved
plots_path <- paste0(mainfolder, subfolder,"plots/")  # path used to save the plots (generated using the .csv data)
file_rdata <- paste0("sums", case_subcase, ".Rdata")
file_rdata_areas <- paste0("areas_", case_areas, ".Rdata")
rdata_path <- paste0(mainfolder, subfolder, file_rdata)
rdata_path_areas <- paste0(mainfolder, "areas/", case_areas, "/", file_rdata_areas)
csv_path <- paste0(mainfolder, subfolder,"csv/")      # path used to save csv (generated using the .Rdata)
csv_path_areas <-  paste0(mainfolder, "areas/", case_areas, "/")     # path used to save csv with data on areas (generated using the .Rdata)
temp = list.files(path = paste0(folder_slost) , pattern = paste0("*", case_subcase, ".csv"), full.names = TRUE)   # save as list the paths of all .csv files in the selected folder
myfiles_1 = lapply(temp, read.csv)            # read the files, create a list where in each element is loaded one of the file as df
rm(temp)
temp = list.files(path = paste0(folder_areas) , pattern = paste0("*.csv"), full.names = TRUE)   # save as list the paths of all .csv files in the selected folder
myfiles_2 = lapply(temp, read.csv)            # read the files, create a list where in each element is loaded one of the file as df
rm(temp)
tstep = seq(from = 2000, to = 2100, by = 10)    # time steps
for_management = c("noAFM", "AFMfree", "AFM25", "AFM50", "AFM75", "AFM100") # new names for management scenarios
names(myfiles_1) = sapply(tstep, FUN = toString)  # rename each element of the list with the corresponding time step
names(myfiles_2) = sapply(tstep, FUN = toString)  # rename each element of the list with the corresponding time step
# select only median values
PDF <- lapply(myfiles_1, function(x) select(x, Scenario, Ecoregion, Year, contains("median")))
# remove columns that do not have a corresponding value in PDF
Areas <- lapply(myfiles_2, function(x) select(x, -contains("new"), -contains("org")))
for (i in 1:length(Areas)) {Areas[[i]]$Year = as.character(tstep[i])}
# convert the elements of the list to a single dataframe
df_PDF <- reduce(PDF, full_join)
df_Areas <- reduce(Areas, full_join)
df_Areas <- df_Areas %>% select(Scenario:Ecoregion, Year, (3:length(df_Areas) - 1)) %>%
rename(For_Plantation_im = For_PlantationFuel_im) %>%
mutate(For_Plantation_im = For_Plantation_im + For_TimberPlant_im) %>%
select(-For_TimberPlant_im)
df_Areas$Year <- as.integer(df_Areas$Year)
Ecoregions_scenarios <- df_PDF %>% select(Scenario, Year, Ecoregion) %>% distinct()
Ecoregions_scenarios$Ecoregion <- as.factor(Ecoregions_scenarios$Ecoregion)
Scenarios <- unique(df_Areas$Scenario)
nscenarios <- length(Scenarios)
df_Areas_new <- data.frame(matrix(NA, nrow = 0, ncol = 0))
# the current df_Areas dataframe contains only the ecoregions considered in GLOBIOM, therefore we need to add
# those which are in the df_PDF and not in df_Areas.
for(sc in 1:nscenarios) {
print(sc)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
right_join(Ecoregions_scenarios) %>%
mutate(Ecoregion = as.character(Ecoregion)) %>%
arrange(Ecoregion) %>%
mutate(Ecoregion = as.factor(Ecoregion)) %>%
mutate(Scenario = toString(Scenarios[sc]))
print(nrow(Areas_temp))
df_Areas_new <- df_Areas_new %>% bind_rows(Areas_temp)
}
Ecoregions <- df_PDF %>% select(Year, Ecoregion) %>% distinct()
Ecoregions$Ecoregion <- as.factor(Ecoregions$Ecoregion)
df_Areas_new <- data.frame(matrix(NA, nrow = 0, ncol = 0))
for(sc in 1:nscenarios) {
print(sc)
Areas_temp <- df_Areas %>% filter(Scenario == toString(Scenarios[sc])) %>%
right_join(Ecoregions) %>%
mutate(Ecoregion = as.character(Ecoregion)) %>%
arrange(Ecoregion) %>%
mutate(Ecoregion = as.factor(Ecoregion)) %>%
mutate(Scenario = toString(Scenarios[sc]))
print(nrow(Areas_temp))
df_Areas_new <- df_Areas_new %>% bind_rows(Areas_temp)
}
df_Areas <- df_Areas_new
rm(df_Areas_new)
df_PDF <- df_PDF %>% arrange(Scenario, Ecoregion, Year)
df_Areas <- df_Areas %>% arrange(Scenario, Ecoregion, Year)
nrow(df_Areas)
nrow(df_PDF)
ratio <- df_PDF
ratio <- bind_cols(ratio[1:3], ratio[4:length(ratio)]/df_Areas[4:length(df_Areas)]) %>%
replace(is.na(.), 0)
# test ====
row_test <- sample(8:nrow(ratio), 1)
test = ratio[row_test,]
test_check1 = df_PDF[row_test,]
test_check2 = df_Areas[row_test,]
if ((!is.na(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU))) &
(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex))) &
(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im))) &
(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im)) > 1e-16)) |
(!is.na(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU))) &
(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU)) > 1e-16))|
(!is.na(abs(test$For_PlantationFuel_im_median - (test_check1$For_PlantationFuel_im_median/test_check2$For_PlantationFuel_im))) &
(abs(test$For_Plantation_im_median - (test_check1$For_Plantation_im_median/test_check2$For_Plantation_im)) > 1e-16)) |
(!is.na(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU))) &
(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU)) > 1e-16)) |
(!is.na(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU))) &
(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU)) > 1e-16))|
(!is.na(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU))) &
(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU)) > 1e-16)))
{stop("ERROR in the calculation of PDF/ha")}
row_test <- sample(8:nrow(ratio), 1)
test = ratio[row_test,]
test_check1 = df_PDF[row_test,]
test_check2 = df_Areas[row_test,]
if ((!is.na(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU))) &
(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex))) &
(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im))) &
(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im)) > 1e-16)) |
(!is.na(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU))) &
(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU)) > 1e-16))|
(!is.na(abs(test$For_PlantationFuel_im_median - (test_check1$For_PlantationFuel_im_median/test_check2$For_PlantationFuel_im))) &
(abs(test$For_Plantation_im_median - (test_check1$For_Plantation_im_median/test_check2$For_Plantation_im)) > 1e-16)) |
(!is.na(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU))) &
(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU)) > 1e-16)) |
(!is.na(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU))) &
(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU)) > 1e-16))|
(!is.na(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU))) &
(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU)) > 1e-16)))
{stop("ERROR in the calculation of PDF/ha")}
row_test <- sample(8:nrow(ratio), 1)
test = ratio[row_test,]
test_check1 = df_PDF[row_test,]
test_check2 = df_Areas[row_test,]
if ((!is.na(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU))) &
(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex))) &
(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im))) &
(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im)) > 1e-16)) |
(!is.na(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU))) &
(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU)) > 1e-16))|
(!is.na(abs(test$For_PlantationFuel_im_median - (test_check1$For_PlantationFuel_im_median/test_check2$For_PlantationFuel_im))) &
(abs(test$For_Plantation_im_median - (test_check1$For_Plantation_im_median/test_check2$For_Plantation_im)) > 1e-16)) |
(!is.na(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU))) &
(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU)) > 1e-16)) |
(!is.na(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU))) &
(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU)) > 1e-16))|
(!is.na(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU))) &
(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU)) > 1e-16)))
{stop("ERROR in the calculation of PDF/ha")}
row_test <- sample(8:nrow(ratio), 1)
test = ratio[row_test,]
test_check1 = df_PDF[row_test,]
test_check2 = df_Areas[row_test,]
if ((!is.na(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU))) &
(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex))) &
(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im))) &
(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im)) > 1e-16)) |
(!is.na(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU))) &
(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU)) > 1e-16))|
(!is.na(abs(test$For_PlantationFuel_im_median - (test_check1$For_PlantationFuel_im_median/test_check2$For_PlantationFuel_im))) &
(abs(test$For_Plantation_im_median - (test_check1$For_Plantation_im_median/test_check2$For_Plantation_im)) > 1e-16)) |
(!is.na(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU))) &
(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU)) > 1e-16)) |
(!is.na(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU))) &
(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU)) > 1e-16))|
(!is.na(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU))) &
(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU)) > 1e-16)))
{stop("ERROR in the calculation of PDF/ha")}
row_test <- sample(8:nrow(ratio), 1)
test = ratio[row_test,]
test_check1 = df_PDF[row_test,]
test_check2 = df_Areas[row_test,]
if ((!is.na(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU))) &
(abs(test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex))) &
(abs(test$For_ClearCut_ex_median - (test_check1$For_ClearCut_ex_median/test_check2$For_ClearCut_ex)) > 1e-16)) |
(!is.na(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im))) &
(abs(test$For_ClearCut_im_median - (test_check1$For_ClearCut_im_median/test_check2$For_ClearCut_im)) > 1e-16)) |
(!is.na(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU))) &
(abs(test$For_Retention_EU_median - (test_check1$For_Retention_EU_median/test_check2$For_Retention_EU)) > 1e-16))|
(!is.na(abs(test$For_PlantationFuel_im_median - (test_check1$For_PlantationFuel_im_median/test_check2$For_PlantationFuel_im))) &
(abs(test$For_Plantation_im_median - (test_check1$For_Plantation_im_median/test_check2$For_Plantation_im)) > 1e-16)) |
(!is.na(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU))) &
(abs(test$For_SelectionSystem_EU_median - (test_check1$For_SelectionSystem_EU_median/test_check2$For_SelectionSystem_EU)) > 1e-16)) |
(!is.na(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU))) &
(abs(test$EP_EU_median - (test_check1$EP_EU_median/test_check2$EP_EU)) > 1e-16))|
(!is.na(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU))) &
(abs(test$EP_conv_EU_median - (test_check1$EP_conv_EU_median/test_check2$EP_conv_EU)) > 1e-16)))
{stop("ERROR in the calculation of PDF/ha")}
test
test_check1
test_check2
test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU))
test$For_ClearCut_EU_median - (test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU)
test$For_ClearCut_EU_median
test_check1$For_ClearCut_EU_median/test_check2$For_ClearCut_EU
write.csv(ratio, paste0(csv_path, "PDF-ha.csv"), row.names = FALSE)
ratio_tot <- df_PDF
ratio_tot <- ratio_tot %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
ratio_tot <- df_PDF
ratio_tot <- ratio_tot %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
head(ratio_tot)
head(df_PDF)
str(df_PDF)
?summarise
ratio_tot <- df_PDF
ratio_tot <- ratio_tot %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
df_Areas_sum <- df_Areas %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
ratio_tot <- bind_cols(ratio_tot[1:3], ratio_tot[4:length(ratio_tot)]/df_Areas_sum[4:length(df_Areas_sum)]) %>%
replace(is.na(.), 0)
head(ratio_tot)
ratio_tot <- df_PDF
ratio_tot <- ratio_tot %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
df_Areas_sum <- df_Areas %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
ratio_tot <- data.frame(bind_cols(ratio_tot[1:3], ratio_tot[4:length(ratio_tot)]/df_Areas_sum[4:length(df_Areas_sum)]) %>%
replace(is.na(.), 0))
head(ratio_tot)
ratio_tot <- df_PDF
df_PDF_sum <- ratio_tot %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
df_Areas_sum <- df_Areas %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
ratio_tot <- data.frame(bind_cols(df_PDF_sum[1:3], df_PDF_sum[4:length(df_PDF_sum)]/df_Areas_sum[4:length(df_Areas_sum)]) %>%
replace(is.na(.), 0))
head(ratio_tot)
head(df_PDF_sum)
ratio_tot <- df_PDF
df_PDF_sum <- df_PDF %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
df_Areas_sum <- df_Areas %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum)
ratio_tot <- data.frame(bind_cols(df_PDF_sum[1:3], df_PDF_sum[4:length(df_PDF_sum)]/df_Areas_sum[4:length(df_Areas_sum)]) %>%
replace(is.na(.), 0))
head(df_PDF_sum)
df_PDF_sum <- data.frame(df_PDF %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum, na.rm = TRUE))
head(df_PDF_sum)
df_Areas_sum <- data.frame(df_Areas %>% select(-Ecoregion) %>%
group_by(Scenario, Year) %>%
summarise_all(sum, na.rm = TRUE))
head(df_Areas_sum)
ratio_tot <- data.frame(bind_cols(df_PDF_sum[1:3], df_PDF_sum[4:length(df_PDF_sum)]/df_Areas_sum[4:length(df_Areas_sum)]) %>%
replace(is.na(.), 0))
head(ratio_tot)
write.csv(ratio_tot, paste0(csv_path, "PDF-ha_tot.csv"), row.names = FALSE)
